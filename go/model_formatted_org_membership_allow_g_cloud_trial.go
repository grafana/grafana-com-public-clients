/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// FormattedOrgMembershipAllowGCloudTrial struct for FormattedOrgMembershipAllowGCloudTrial
type FormattedOrgMembershipAllowGCloudTrial struct {
	Bool    *bool
	Float32 *float32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FormattedOrgMembershipAllowGCloudTrial) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		jsonBool, _ := json.Marshal(dst.Bool)
		if string(jsonBool) == "{}" { // empty struct
			dst.Bool = nil
		} else {
			return nil // data stored in dst.Bool, return on the first match
		}
	} else {
		dst.Bool = nil
	}

	// try to unmarshal JSON data into Float32
	err = json.Unmarshal(data, &dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			return nil // data stored in dst.Float32, return on the first match
		}
	} else {
		dst.Float32 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FormattedOrgMembershipAllowGCloudTrial)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FormattedOrgMembershipAllowGCloudTrial) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		return json.Marshal(&src.Bool)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFormattedOrgMembershipAllowGCloudTrial struct {
	value *FormattedOrgMembershipAllowGCloudTrial
	isSet bool
}

func (v NullableFormattedOrgMembershipAllowGCloudTrial) Get() *FormattedOrgMembershipAllowGCloudTrial {
	return v.value
}

func (v *NullableFormattedOrgMembershipAllowGCloudTrial) Set(val *FormattedOrgMembershipAllowGCloudTrial) {
	v.value = val
	v.isSet = true
}

func (v NullableFormattedOrgMembershipAllowGCloudTrial) IsSet() bool {
	return v.isSet
}

func (v *NullableFormattedOrgMembershipAllowGCloudTrial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormattedOrgMembershipAllowGCloudTrial(val *FormattedOrgMembershipAllowGCloudTrial) *NullableFormattedOrgMembershipAllowGCloudTrial {
	return &NullableFormattedOrgMembershipAllowGCloudTrial{value: val, isSet: true}
}

func (v NullableFormattedOrgMembershipAllowGCloudTrial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormattedOrgMembershipAllowGCloudTrial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
