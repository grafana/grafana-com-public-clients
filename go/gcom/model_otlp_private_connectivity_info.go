/*
GCOM API

 Grafana.com API (or GCOM). This documentation includes all endpoints of GCOM API including the staff ones.  Looking for GCOM API client packages? You can find them at [grafana-com-clients](https://github.com/grafana/grafana-com-clients) repository.  If you have any questions, please contact us at #grafana_com on Slack or open an issue at [Grafana-com repository](https://github.com/grafana/grafana-com/issues/new).  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: internal
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// OtlpPrivateConnectivityInfo struct for OtlpPrivateConnectivityInfo
type OtlpPrivateConnectivityInfo struct {
	OtlpPrivateConnectivityInfoAnyOf  *OtlpPrivateConnectivityInfoAnyOf
	OtlpPrivateConnectivityInfoAnyOf1 *OtlpPrivateConnectivityInfoAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OtlpPrivateConnectivityInfo) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into OtlpPrivateConnectivityInfoAnyOf
	err = json.Unmarshal(data, &dst.OtlpPrivateConnectivityInfoAnyOf)
	if err == nil {
		jsonOtlpPrivateConnectivityInfoAnyOf, _ := json.Marshal(dst.OtlpPrivateConnectivityInfoAnyOf)
		if string(jsonOtlpPrivateConnectivityInfoAnyOf) == "{}" { // empty struct
			dst.OtlpPrivateConnectivityInfoAnyOf = nil
		} else {
			return nil // data stored in dst.OtlpPrivateConnectivityInfoAnyOf, return on the first match
		}
	} else {
		dst.OtlpPrivateConnectivityInfoAnyOf = nil
	}

	// try to unmarshal JSON data into OtlpPrivateConnectivityInfoAnyOf1
	err = json.Unmarshal(data, &dst.OtlpPrivateConnectivityInfoAnyOf1)
	if err == nil {
		jsonOtlpPrivateConnectivityInfoAnyOf1, _ := json.Marshal(dst.OtlpPrivateConnectivityInfoAnyOf1)
		if string(jsonOtlpPrivateConnectivityInfoAnyOf1) == "{}" { // empty struct
			dst.OtlpPrivateConnectivityInfoAnyOf1 = nil
		} else {
			return nil // data stored in dst.OtlpPrivateConnectivityInfoAnyOf1, return on the first match
		}
	} else {
		dst.OtlpPrivateConnectivityInfoAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(OtlpPrivateConnectivityInfo)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *OtlpPrivateConnectivityInfo) MarshalJSON() ([]byte, error) {
	if src.OtlpPrivateConnectivityInfoAnyOf != nil {
		return json.Marshal(&src.OtlpPrivateConnectivityInfoAnyOf)
	}

	if src.OtlpPrivateConnectivityInfoAnyOf1 != nil {
		return json.Marshal(&src.OtlpPrivateConnectivityInfoAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableOtlpPrivateConnectivityInfo struct {
	value *OtlpPrivateConnectivityInfo
	isSet bool
}

func (v NullableOtlpPrivateConnectivityInfo) Get() *OtlpPrivateConnectivityInfo {
	return v.value
}

func (v *NullableOtlpPrivateConnectivityInfo) Set(val *OtlpPrivateConnectivityInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOtlpPrivateConnectivityInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOtlpPrivateConnectivityInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOtlpPrivateConnectivityInfo(val *OtlpPrivateConnectivityInfo) *NullableOtlpPrivateConnectivityInfo {
	return &NullableOtlpPrivateConnectivityInfo{value: val, isSet: true}
}

func (v NullableOtlpPrivateConnectivityInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOtlpPrivateConnectivityInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
