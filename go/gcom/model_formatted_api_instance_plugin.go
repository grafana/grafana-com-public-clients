/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"time"
)

// checks if the FormattedApiInstancePlugin type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormattedApiInstancePlugin{}

// FormattedApiInstancePlugin struct for FormattedApiInstancePlugin
type FormattedApiInstancePlugin struct {
	Id                   *float32     `json:"id,omitempty"`
	InstanceId           *float32     `json:"instanceId,omitempty"`
	InstanceUrl          *string      `json:"instanceUrl,omitempty"`
	InstanceSlug         *string      `json:"instanceSlug,omitempty"`
	PluginId             *float32     `json:"pluginId,omitempty"`
	PluginSlug           *string      `json:"pluginSlug,omitempty"`
	PluginName           *string      `json:"pluginName,omitempty"`
	Version              *string      `json:"version,omitempty"`
	LatestVersion        *string      `json:"latestVersion,omitempty"`
	CreatedAt            *string      `json:"createdAt,omitempty"`
	UpdatedAt            *time.Time   `json:"updatedAt,omitempty"`
	Links                []LinksInner `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormattedApiInstancePlugin FormattedApiInstancePlugin

// NewFormattedApiInstancePlugin instantiates a new FormattedApiInstancePlugin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormattedApiInstancePlugin() *FormattedApiInstancePlugin {
	this := FormattedApiInstancePlugin{}
	return &this
}

// NewFormattedApiInstancePluginWithDefaults instantiates a new FormattedApiInstancePlugin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormattedApiInstancePluginWithDefaults() *FormattedApiInstancePlugin {
	this := FormattedApiInstancePlugin{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *FormattedApiInstancePlugin) SetId(v float32) {
	o.Id = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetInstanceId() float32 {
	if o == nil || IsNil(o.InstanceId) {
		var ret float32
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetInstanceIdOk() (*float32, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given float32 and assigns it to the InstanceId field.
func (o *FormattedApiInstancePlugin) SetInstanceId(v float32) {
	o.InstanceId = &v
}

// GetInstanceUrl returns the InstanceUrl field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetInstanceUrl() string {
	if o == nil || IsNil(o.InstanceUrl) {
		var ret string
		return ret
	}
	return *o.InstanceUrl
}

// GetInstanceUrlOk returns a tuple with the InstanceUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetInstanceUrlOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceUrl) {
		return nil, false
	}
	return o.InstanceUrl, true
}

// HasInstanceUrl returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasInstanceUrl() bool {
	if o != nil && !IsNil(o.InstanceUrl) {
		return true
	}

	return false
}

// SetInstanceUrl gets a reference to the given string and assigns it to the InstanceUrl field.
func (o *FormattedApiInstancePlugin) SetInstanceUrl(v string) {
	o.InstanceUrl = &v
}

// GetInstanceSlug returns the InstanceSlug field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetInstanceSlug() string {
	if o == nil || IsNil(o.InstanceSlug) {
		var ret string
		return ret
	}
	return *o.InstanceSlug
}

// GetInstanceSlugOk returns a tuple with the InstanceSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetInstanceSlugOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceSlug) {
		return nil, false
	}
	return o.InstanceSlug, true
}

// HasInstanceSlug returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasInstanceSlug() bool {
	if o != nil && !IsNil(o.InstanceSlug) {
		return true
	}

	return false
}

// SetInstanceSlug gets a reference to the given string and assigns it to the InstanceSlug field.
func (o *FormattedApiInstancePlugin) SetInstanceSlug(v string) {
	o.InstanceSlug = &v
}

// GetPluginId returns the PluginId field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetPluginId() float32 {
	if o == nil || IsNil(o.PluginId) {
		var ret float32
		return ret
	}
	return *o.PluginId
}

// GetPluginIdOk returns a tuple with the PluginId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetPluginIdOk() (*float32, bool) {
	if o == nil || IsNil(o.PluginId) {
		return nil, false
	}
	return o.PluginId, true
}

// HasPluginId returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasPluginId() bool {
	if o != nil && !IsNil(o.PluginId) {
		return true
	}

	return false
}

// SetPluginId gets a reference to the given float32 and assigns it to the PluginId field.
func (o *FormattedApiInstancePlugin) SetPluginId(v float32) {
	o.PluginId = &v
}

// GetPluginSlug returns the PluginSlug field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetPluginSlug() string {
	if o == nil || IsNil(o.PluginSlug) {
		var ret string
		return ret
	}
	return *o.PluginSlug
}

// GetPluginSlugOk returns a tuple with the PluginSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetPluginSlugOk() (*string, bool) {
	if o == nil || IsNil(o.PluginSlug) {
		return nil, false
	}
	return o.PluginSlug, true
}

// HasPluginSlug returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasPluginSlug() bool {
	if o != nil && !IsNil(o.PluginSlug) {
		return true
	}

	return false
}

// SetPluginSlug gets a reference to the given string and assigns it to the PluginSlug field.
func (o *FormattedApiInstancePlugin) SetPluginSlug(v string) {
	o.PluginSlug = &v
}

// GetPluginName returns the PluginName field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetPluginName() string {
	if o == nil || IsNil(o.PluginName) {
		var ret string
		return ret
	}
	return *o.PluginName
}

// GetPluginNameOk returns a tuple with the PluginName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetPluginNameOk() (*string, bool) {
	if o == nil || IsNil(o.PluginName) {
		return nil, false
	}
	return o.PluginName, true
}

// HasPluginName returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasPluginName() bool {
	if o != nil && !IsNil(o.PluginName) {
		return true
	}

	return false
}

// SetPluginName gets a reference to the given string and assigns it to the PluginName field.
func (o *FormattedApiInstancePlugin) SetPluginName(v string) {
	o.PluginName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *FormattedApiInstancePlugin) SetVersion(v string) {
	o.Version = &v
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetLatestVersion() string {
	if o == nil || IsNil(o.LatestVersion) {
		var ret string
		return ret
	}
	return *o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetLatestVersionOk() (*string, bool) {
	if o == nil || IsNil(o.LatestVersion) {
		return nil, false
	}
	return o.LatestVersion, true
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasLatestVersion() bool {
	if o != nil && !IsNil(o.LatestVersion) {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given string and assigns it to the LatestVersion field.
func (o *FormattedApiInstancePlugin) SetLatestVersion(v string) {
	o.LatestVersion = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FormattedApiInstancePlugin) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *FormattedApiInstancePlugin) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FormattedApiInstancePlugin) GetLinks() []LinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []LinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiInstancePlugin) GetLinksOk() ([]LinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FormattedApiInstancePlugin) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinksInner and assigns it to the Links field.
func (o *FormattedApiInstancePlugin) SetLinks(v []LinksInner) {
	o.Links = v
}

func (o FormattedApiInstancePlugin) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormattedApiInstancePlugin) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.InstanceUrl) {
		toSerialize["instanceUrl"] = o.InstanceUrl
	}
	if !IsNil(o.InstanceSlug) {
		toSerialize["instanceSlug"] = o.InstanceSlug
	}
	if !IsNil(o.PluginId) {
		toSerialize["pluginId"] = o.PluginId
	}
	if !IsNil(o.PluginSlug) {
		toSerialize["pluginSlug"] = o.PluginSlug
	}
	if !IsNil(o.PluginName) {
		toSerialize["pluginName"] = o.PluginName
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.LatestVersion) {
		toSerialize["latestVersion"] = o.LatestVersion
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormattedApiInstancePlugin) UnmarshalJSON(data []byte) (err error) {
	varFormattedApiInstancePlugin := _FormattedApiInstancePlugin{}

	err = json.Unmarshal(data, &varFormattedApiInstancePlugin)

	if err != nil {
		return err
	}

	*o = FormattedApiInstancePlugin(varFormattedApiInstancePlugin)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "instanceUrl")
		delete(additionalProperties, "instanceSlug")
		delete(additionalProperties, "pluginId")
		delete(additionalProperties, "pluginSlug")
		delete(additionalProperties, "pluginName")
		delete(additionalProperties, "version")
		delete(additionalProperties, "latestVersion")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormattedApiInstancePlugin struct {
	value *FormattedApiInstancePlugin
	isSet bool
}

func (v NullableFormattedApiInstancePlugin) Get() *FormattedApiInstancePlugin {
	return v.value
}

func (v *NullableFormattedApiInstancePlugin) Set(val *FormattedApiInstancePlugin) {
	v.value = val
	v.isSet = true
}

func (v NullableFormattedApiInstancePlugin) IsSet() bool {
	return v.isSet
}

func (v *NullableFormattedApiInstancePlugin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormattedApiInstancePlugin(val *FormattedApiInstancePlugin) *NullableFormattedApiInstancePlugin {
	return &NullableFormattedApiInstancePlugin{value: val, isSet: true}
}

func (v NullableFormattedApiInstancePlugin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormattedApiInstancePlugin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
