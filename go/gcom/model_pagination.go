/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the Pagination type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Pagination{}

// Pagination struct for Pagination
type Pagination struct {
	PageCursor           NullableString `json:"pageCursor,omitempty"`
	NextPage             NullableString `json:"nextPage,omitempty"`
	PageSize             float32        `json:"pageSize"`
	AdditionalProperties map[string]interface{}
}

type _Pagination Pagination

// NewPagination instantiates a new Pagination object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPagination(pageSize float32) *Pagination {
	this := Pagination{}
	this.PageSize = pageSize
	return &this
}

// NewPaginationWithDefaults instantiates a new Pagination object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationWithDefaults() *Pagination {
	this := Pagination{}
	return &this
}

// GetPageCursor returns the PageCursor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Pagination) GetPageCursor() string {
	if o == nil || IsNil(o.PageCursor.Get()) {
		var ret string
		return ret
	}
	return *o.PageCursor.Get()
}

// GetPageCursorOk returns a tuple with the PageCursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pagination) GetPageCursorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PageCursor.Get(), o.PageCursor.IsSet()
}

// HasPageCursor returns a boolean if a field has been set.
func (o *Pagination) HasPageCursor() bool {
	if o != nil && o.PageCursor.IsSet() {
		return true
	}

	return false
}

// SetPageCursor gets a reference to the given NullableString and assigns it to the PageCursor field.
func (o *Pagination) SetPageCursor(v string) {
	o.PageCursor.Set(&v)
}

// SetPageCursorNil sets the value for PageCursor to be an explicit nil
func (o *Pagination) SetPageCursorNil() {
	o.PageCursor.Set(nil)
}

// UnsetPageCursor ensures that no value is present for PageCursor, not even an explicit nil
func (o *Pagination) UnsetPageCursor() {
	o.PageCursor.Unset()
}

// GetNextPage returns the NextPage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Pagination) GetNextPage() string {
	if o == nil || IsNil(o.NextPage.Get()) {
		var ret string
		return ret
	}
	return *o.NextPage.Get()
}

// GetNextPageOk returns a tuple with the NextPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Pagination) GetNextPageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NextPage.Get(), o.NextPage.IsSet()
}

// HasNextPage returns a boolean if a field has been set.
func (o *Pagination) HasNextPage() bool {
	if o != nil && o.NextPage.IsSet() {
		return true
	}

	return false
}

// SetNextPage gets a reference to the given NullableString and assigns it to the NextPage field.
func (o *Pagination) SetNextPage(v string) {
	o.NextPage.Set(&v)
}

// SetNextPageNil sets the value for NextPage to be an explicit nil
func (o *Pagination) SetNextPageNil() {
	o.NextPage.Set(nil)
}

// UnsetNextPage ensures that no value is present for NextPage, not even an explicit nil
func (o *Pagination) UnsetNextPage() {
	o.NextPage.Unset()
}

// GetPageSize returns the PageSize field value
func (o *Pagination) GetPageSize() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value
// and a boolean to check if the value has been set.
func (o *Pagination) GetPageSizeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PageSize, true
}

// SetPageSize sets field value
func (o *Pagination) SetPageSize(v float32) {
	o.PageSize = v
}

func (o Pagination) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Pagination) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PageCursor.IsSet() {
		toSerialize["pageCursor"] = o.PageCursor.Get()
	}
	if o.NextPage.IsSet() {
		toSerialize["nextPage"] = o.NextPage.Get()
	}
	toSerialize["pageSize"] = o.PageSize

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Pagination) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varPagination := _Pagination{}

	err = json.Unmarshal(data, &varPagination)

	if err != nil {
		return err
	}

	*o = Pagination(varPagination)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pageCursor")
		delete(additionalProperties, "nextPage")
		delete(additionalProperties, "pageSize")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePagination struct {
	value *Pagination
	isSet bool
}

func (v NullablePagination) Get() *Pagination {
	return v.value
}

func (v *NullablePagination) Set(val *Pagination) {
	v.value = val
	v.isSet = true
}

func (v NullablePagination) IsSet() bool {
	return v.isSet
}

func (v *NullablePagination) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePagination(val *Pagination) *NullablePagination {
	return &NullablePagination{value: val, isSet: true}
}

func (v NullablePagination) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePagination) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
