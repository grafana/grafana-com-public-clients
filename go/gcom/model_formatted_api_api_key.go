/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the FormattedApiApiKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormattedApiApiKey{}

// FormattedApiApiKey struct for FormattedApiApiKey
type FormattedApiApiKey struct {
	Id                   *float32        `json:"id,omitempty"`
	OrgId                *float32        `json:"orgId,omitempty"`
	OrgSlug              *string         `json:"orgSlug,omitempty"`
	OrgName              *string         `json:"orgName,omitempty"`
	InstanceId           NullableFloat32 `json:"instanceId,omitempty"`
	Name                 *string         `json:"name,omitempty"`
	Role                 *string         `json:"role,omitempty"`
	CreatedAt            *string         `json:"createdAt,omitempty"`
	UpdatedAt            NullableString  `json:"updatedAt,omitempty"`
	FirstUsed            NullableString  `json:"firstUsed,omitempty"`
	Token                *string         `json:"token,omitempty"`
	Links                []LinksInner    `json:"links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FormattedApiApiKey FormattedApiApiKey

// NewFormattedApiApiKey instantiates a new FormattedApiApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormattedApiApiKey() *FormattedApiApiKey {
	this := FormattedApiApiKey{}
	return &this
}

// NewFormattedApiApiKeyWithDefaults instantiates a new FormattedApiApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormattedApiApiKeyWithDefaults() *FormattedApiApiKey {
	this := FormattedApiApiKey{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *FormattedApiApiKey) SetId(v float32) {
	o.Id = &v
}

// GetOrgId returns the OrgId field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetOrgId() float32 {
	if o == nil || IsNil(o.OrgId) {
		var ret float32
		return ret
	}
	return *o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetOrgIdOk() (*float32, bool) {
	if o == nil || IsNil(o.OrgId) {
		return nil, false
	}
	return o.OrgId, true
}

// HasOrgId returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasOrgId() bool {
	if o != nil && !IsNil(o.OrgId) {
		return true
	}

	return false
}

// SetOrgId gets a reference to the given float32 and assigns it to the OrgId field.
func (o *FormattedApiApiKey) SetOrgId(v float32) {
	o.OrgId = &v
}

// GetOrgSlug returns the OrgSlug field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetOrgSlug() string {
	if o == nil || IsNil(o.OrgSlug) {
		var ret string
		return ret
	}
	return *o.OrgSlug
}

// GetOrgSlugOk returns a tuple with the OrgSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetOrgSlugOk() (*string, bool) {
	if o == nil || IsNil(o.OrgSlug) {
		return nil, false
	}
	return o.OrgSlug, true
}

// HasOrgSlug returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasOrgSlug() bool {
	if o != nil && !IsNil(o.OrgSlug) {
		return true
	}

	return false
}

// SetOrgSlug gets a reference to the given string and assigns it to the OrgSlug field.
func (o *FormattedApiApiKey) SetOrgSlug(v string) {
	o.OrgSlug = &v
}

// GetOrgName returns the OrgName field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetOrgName() string {
	if o == nil || IsNil(o.OrgName) {
		var ret string
		return ret
	}
	return *o.OrgName
}

// GetOrgNameOk returns a tuple with the OrgName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetOrgNameOk() (*string, bool) {
	if o == nil || IsNil(o.OrgName) {
		return nil, false
	}
	return o.OrgName, true
}

// HasOrgName returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasOrgName() bool {
	if o != nil && !IsNil(o.OrgName) {
		return true
	}

	return false
}

// SetOrgName gets a reference to the given string and assigns it to the OrgName field.
func (o *FormattedApiApiKey) SetOrgName(v string) {
	o.OrgName = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormattedApiApiKey) GetInstanceId() float32 {
	if o == nil || IsNil(o.InstanceId.Get()) {
		var ret float32
		return ret
	}
	return *o.InstanceId.Get()
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormattedApiApiKey) GetInstanceIdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstanceId.Get(), o.InstanceId.IsSet()
}

// HasInstanceId returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasInstanceId() bool {
	if o != nil && o.InstanceId.IsSet() {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given NullableFloat32 and assigns it to the InstanceId field.
func (o *FormattedApiApiKey) SetInstanceId(v float32) {
	o.InstanceId.Set(&v)
}

// SetInstanceIdNil sets the value for InstanceId to be an explicit nil
func (o *FormattedApiApiKey) SetInstanceIdNil() {
	o.InstanceId.Set(nil)
}

// UnsetInstanceId ensures that no value is present for InstanceId, not even an explicit nil
func (o *FormattedApiApiKey) UnsetInstanceId() {
	o.InstanceId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FormattedApiApiKey) SetName(v string) {
	o.Name = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *FormattedApiApiKey) SetRole(v string) {
	o.Role = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *FormattedApiApiKey) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormattedApiApiKey) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret string
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormattedApiApiKey) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableString and assigns it to the UpdatedAt field.
func (o *FormattedApiApiKey) SetUpdatedAt(v string) {
	o.UpdatedAt.Set(&v)
}

// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *FormattedApiApiKey) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *FormattedApiApiKey) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetFirstUsed returns the FirstUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormattedApiApiKey) GetFirstUsed() string {
	if o == nil || IsNil(o.FirstUsed.Get()) {
		var ret string
		return ret
	}
	return *o.FirstUsed.Get()
}

// GetFirstUsedOk returns a tuple with the FirstUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormattedApiApiKey) GetFirstUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstUsed.Get(), o.FirstUsed.IsSet()
}

// HasFirstUsed returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasFirstUsed() bool {
	if o != nil && o.FirstUsed.IsSet() {
		return true
	}

	return false
}

// SetFirstUsed gets a reference to the given NullableString and assigns it to the FirstUsed field.
func (o *FormattedApiApiKey) SetFirstUsed(v string) {
	o.FirstUsed.Set(&v)
}

// SetFirstUsedNil sets the value for FirstUsed to be an explicit nil
func (o *FormattedApiApiKey) SetFirstUsedNil() {
	o.FirstUsed.Set(nil)
}

// UnsetFirstUsed ensures that no value is present for FirstUsed, not even an explicit nil
func (o *FormattedApiApiKey) UnsetFirstUsed() {
	o.FirstUsed.Unset()
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *FormattedApiApiKey) SetToken(v string) {
	o.Token = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *FormattedApiApiKey) GetLinks() []LinksInner {
	if o == nil || IsNil(o.Links) {
		var ret []LinksInner
		return ret
	}
	return o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormattedApiApiKey) GetLinksOk() ([]LinksInner, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *FormattedApiApiKey) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given []LinksInner and assigns it to the Links field.
func (o *FormattedApiApiKey) SetLinks(v []LinksInner) {
	o.Links = v
}

func (o FormattedApiApiKey) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormattedApiApiKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrgId) {
		toSerialize["orgId"] = o.OrgId
	}
	if !IsNil(o.OrgSlug) {
		toSerialize["orgSlug"] = o.OrgSlug
	}
	if !IsNil(o.OrgName) {
		toSerialize["orgName"] = o.OrgName
	}
	if o.InstanceId.IsSet() {
		toSerialize["instanceId"] = o.InstanceId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["updatedAt"] = o.UpdatedAt.Get()
	}
	if o.FirstUsed.IsSet() {
		toSerialize["firstUsed"] = o.FirstUsed.Get()
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FormattedApiApiKey) UnmarshalJSON(data []byte) (err error) {
	varFormattedApiApiKey := _FormattedApiApiKey{}

	err = json.Unmarshal(data, &varFormattedApiApiKey)

	if err != nil {
		return err
	}

	*o = FormattedApiApiKey(varFormattedApiApiKey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "orgId")
		delete(additionalProperties, "orgSlug")
		delete(additionalProperties, "orgName")
		delete(additionalProperties, "instanceId")
		delete(additionalProperties, "name")
		delete(additionalProperties, "role")
		delete(additionalProperties, "createdAt")
		delete(additionalProperties, "updatedAt")
		delete(additionalProperties, "firstUsed")
		delete(additionalProperties, "token")
		delete(additionalProperties, "links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFormattedApiApiKey struct {
	value *FormattedApiApiKey
	isSet bool
}

func (v NullableFormattedApiApiKey) Get() *FormattedApiApiKey {
	return v.value
}

func (v *NullableFormattedApiApiKey) Set(val *FormattedApiApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableFormattedApiApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableFormattedApiApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormattedApiApiKey(val *FormattedApiApiKey) *NullableFormattedApiApiKey {
	return &NullableFormattedApiApiKey{value: val, isSet: true}
}

func (v NullableFormattedApiApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormattedApiApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
