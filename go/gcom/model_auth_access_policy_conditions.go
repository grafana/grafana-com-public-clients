/*
GCOM API

 Grafana.com API (or GCOM). This documentation includes all endpoints of GCOM API including the staff ones.  Looking for GCOM API client packages? You can find them at [grafana-com-clients](https://github.com/grafana/grafana-com-clients) repository.  If you have any questions, please contact us at #grafana_com on Slack or open an issue at [Grafana-com repository](https://github.com/grafana/grafana-com/issues/new).  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: internal
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AuthAccessPolicyConditions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthAccessPolicyConditions{}

// AuthAccessPolicyConditions A set of criteria that is used to restrict access of the Access Policy and Tokens. Providing an empty object (\"{}\") results in the complete removal of the `conditions` object.
type AuthAccessPolicyConditions struct {
	// An array of IP addresses with subnet masks in CIDR notation (both IPv4 or IPv6 are supported) that is used to restrict access to only hosts that are part of at least one of the subnets. Providing an empty array is equivalent to providing an empty `conditions` object, and results in the removal of the `conditions` object from the Access Policy. Note that an IP address is not valid CIDR notation. For specifying a single IP address use a subnet mask of `/32` for IPv4 and `/128` for IPv6. Examples: 192.168.0.10/32 2001:db0:82a3:0:0:8a2e:370:1234/128
	AllowedSubnets       []AuthAccessPolicyConditionsAllowedSubnetsInner `json:"allowedSubnets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthAccessPolicyConditions AuthAccessPolicyConditions

// NewAuthAccessPolicyConditions instantiates a new AuthAccessPolicyConditions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthAccessPolicyConditions() *AuthAccessPolicyConditions {
	this := AuthAccessPolicyConditions{}
	return &this
}

// NewAuthAccessPolicyConditionsWithDefaults instantiates a new AuthAccessPolicyConditions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthAccessPolicyConditionsWithDefaults() *AuthAccessPolicyConditions {
	this := AuthAccessPolicyConditions{}
	return &this
}

// GetAllowedSubnets returns the AllowedSubnets field value if set, zero value otherwise.
func (o *AuthAccessPolicyConditions) GetAllowedSubnets() []AuthAccessPolicyConditionsAllowedSubnetsInner {
	if o == nil || IsNil(o.AllowedSubnets) {
		var ret []AuthAccessPolicyConditionsAllowedSubnetsInner
		return ret
	}
	return o.AllowedSubnets
}

// GetAllowedSubnetsOk returns a tuple with the AllowedSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAccessPolicyConditions) GetAllowedSubnetsOk() ([]AuthAccessPolicyConditionsAllowedSubnetsInner, bool) {
	if o == nil || IsNil(o.AllowedSubnets) {
		return nil, false
	}
	return o.AllowedSubnets, true
}

// HasAllowedSubnets returns a boolean if a field has been set.
func (o *AuthAccessPolicyConditions) HasAllowedSubnets() bool {
	if o != nil && !IsNil(o.AllowedSubnets) {
		return true
	}

	return false
}

// SetAllowedSubnets gets a reference to the given []AuthAccessPolicyConditionsAllowedSubnetsInner and assigns it to the AllowedSubnets field.
func (o *AuthAccessPolicyConditions) SetAllowedSubnets(v []AuthAccessPolicyConditionsAllowedSubnetsInner) {
	o.AllowedSubnets = v
}

func (o AuthAccessPolicyConditions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthAccessPolicyConditions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedSubnets) {
		toSerialize["allowedSubnets"] = o.AllowedSubnets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthAccessPolicyConditions) UnmarshalJSON(data []byte) (err error) {
	varAuthAccessPolicyConditions := _AuthAccessPolicyConditions{}

	err = json.Unmarshal(data, &varAuthAccessPolicyConditions)

	if err != nil {
		return err
	}

	*o = AuthAccessPolicyConditions(varAuthAccessPolicyConditions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowedSubnets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthAccessPolicyConditions struct {
	value *AuthAccessPolicyConditions
	isSet bool
}

func (v NullableAuthAccessPolicyConditions) Get() *AuthAccessPolicyConditions {
	return v.value
}

func (v *NullableAuthAccessPolicyConditions) Set(val *AuthAccessPolicyConditions) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthAccessPolicyConditions) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthAccessPolicyConditions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthAccessPolicyConditions(val *AuthAccessPolicyConditions) *NullableAuthAccessPolicyConditions {
	return &NullableAuthAccessPolicyConditions{value: val, isSet: true}
}

func (v NullableAuthAccessPolicyConditions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthAccessPolicyConditions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
