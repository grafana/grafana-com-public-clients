/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// checks if the PostInstanceOAuthOktaRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostInstanceOAuthOktaRequest{}

// PostInstanceOAuthOktaRequest struct for PostInstanceOAuthOktaRequest
type PostInstanceOAuthOktaRequest struct {
	AllowedDomains       []string `json:"allowedDomains,omitempty"`
	AllowedGroups        []string `json:"allowedGroups,omitempty"`
	ApiUrl               string   `json:"apiUrl"`
	AuthUrl              string   `json:"authUrl"`
	ClientId             string   `json:"clientId"`
	ClientSecret         *string  `json:"clientSecret,omitempty"`
	RoleAttributePath    *string  `json:"roleAttributePath,omitempty"`
	TokenUrl             string   `json:"tokenUrl"`
	AdditionalProperties map[string]interface{}
}

type _PostInstanceOAuthOktaRequest PostInstanceOAuthOktaRequest

// NewPostInstanceOAuthOktaRequest instantiates a new PostInstanceOAuthOktaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostInstanceOAuthOktaRequest(apiUrl string, authUrl string, clientId string, tokenUrl string) *PostInstanceOAuthOktaRequest {
	this := PostInstanceOAuthOktaRequest{}
	this.ApiUrl = apiUrl
	this.AuthUrl = authUrl
	this.ClientId = clientId
	this.TokenUrl = tokenUrl
	return &this
}

// NewPostInstanceOAuthOktaRequestWithDefaults instantiates a new PostInstanceOAuthOktaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostInstanceOAuthOktaRequestWithDefaults() *PostInstanceOAuthOktaRequest {
	this := PostInstanceOAuthOktaRequest{}
	return &this
}

// GetAllowedDomains returns the AllowedDomains field value if set, zero value otherwise.
func (o *PostInstanceOAuthOktaRequest) GetAllowedDomains() []string {
	if o == nil || IsNil(o.AllowedDomains) {
		var ret []string
		return ret
	}
	return o.AllowedDomains
}

// GetAllowedDomainsOk returns a tuple with the AllowedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetAllowedDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedDomains) {
		return nil, false
	}
	return o.AllowedDomains, true
}

// HasAllowedDomains returns a boolean if a field has been set.
func (o *PostInstanceOAuthOktaRequest) HasAllowedDomains() bool {
	if o != nil && !IsNil(o.AllowedDomains) {
		return true
	}

	return false
}

// SetAllowedDomains gets a reference to the given []string and assigns it to the AllowedDomains field.
func (o *PostInstanceOAuthOktaRequest) SetAllowedDomains(v []string) {
	o.AllowedDomains = v
}

// GetAllowedGroups returns the AllowedGroups field value if set, zero value otherwise.
func (o *PostInstanceOAuthOktaRequest) GetAllowedGroups() []string {
	if o == nil || IsNil(o.AllowedGroups) {
		var ret []string
		return ret
	}
	return o.AllowedGroups
}

// GetAllowedGroupsOk returns a tuple with the AllowedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetAllowedGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedGroups) {
		return nil, false
	}
	return o.AllowedGroups, true
}

// HasAllowedGroups returns a boolean if a field has been set.
func (o *PostInstanceOAuthOktaRequest) HasAllowedGroups() bool {
	if o != nil && !IsNil(o.AllowedGroups) {
		return true
	}

	return false
}

// SetAllowedGroups gets a reference to the given []string and assigns it to the AllowedGroups field.
func (o *PostInstanceOAuthOktaRequest) SetAllowedGroups(v []string) {
	o.AllowedGroups = v
}

// GetApiUrl returns the ApiUrl field value
func (o *PostInstanceOAuthOktaRequest) GetApiUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetApiUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ApiUrl, true
}

// SetApiUrl sets field value
func (o *PostInstanceOAuthOktaRequest) SetApiUrl(v string) {
	o.ApiUrl = v
}

// GetAuthUrl returns the AuthUrl field value
func (o *PostInstanceOAuthOktaRequest) GetAuthUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthUrl
}

// GetAuthUrlOk returns a tuple with the AuthUrl field value
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetAuthUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthUrl, true
}

// SetAuthUrl sets field value
func (o *PostInstanceOAuthOktaRequest) SetAuthUrl(v string) {
	o.AuthUrl = v
}

// GetClientId returns the ClientId field value
func (o *PostInstanceOAuthOktaRequest) GetClientId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *PostInstanceOAuthOktaRequest) SetClientId(v string) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value if set, zero value otherwise.
func (o *PostInstanceOAuthOktaRequest) GetClientSecret() string {
	if o == nil || IsNil(o.ClientSecret) {
		var ret string
		return ret
	}
	return *o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetClientSecretOk() (*string, bool) {
	if o == nil || IsNil(o.ClientSecret) {
		return nil, false
	}
	return o.ClientSecret, true
}

// HasClientSecret returns a boolean if a field has been set.
func (o *PostInstanceOAuthOktaRequest) HasClientSecret() bool {
	if o != nil && !IsNil(o.ClientSecret) {
		return true
	}

	return false
}

// SetClientSecret gets a reference to the given string and assigns it to the ClientSecret field.
func (o *PostInstanceOAuthOktaRequest) SetClientSecret(v string) {
	o.ClientSecret = &v
}

// GetRoleAttributePath returns the RoleAttributePath field value if set, zero value otherwise.
func (o *PostInstanceOAuthOktaRequest) GetRoleAttributePath() string {
	if o == nil || IsNil(o.RoleAttributePath) {
		var ret string
		return ret
	}
	return *o.RoleAttributePath
}

// GetRoleAttributePathOk returns a tuple with the RoleAttributePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetRoleAttributePathOk() (*string, bool) {
	if o == nil || IsNil(o.RoleAttributePath) {
		return nil, false
	}
	return o.RoleAttributePath, true
}

// HasRoleAttributePath returns a boolean if a field has been set.
func (o *PostInstanceOAuthOktaRequest) HasRoleAttributePath() bool {
	if o != nil && !IsNil(o.RoleAttributePath) {
		return true
	}

	return false
}

// SetRoleAttributePath gets a reference to the given string and assigns it to the RoleAttributePath field.
func (o *PostInstanceOAuthOktaRequest) SetRoleAttributePath(v string) {
	o.RoleAttributePath = &v
}

// GetTokenUrl returns the TokenUrl field value
func (o *PostInstanceOAuthOktaRequest) GetTokenUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TokenUrl
}

// GetTokenUrlOk returns a tuple with the TokenUrl field value
// and a boolean to check if the value has been set.
func (o *PostInstanceOAuthOktaRequest) GetTokenUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokenUrl, true
}

// SetTokenUrl sets field value
func (o *PostInstanceOAuthOktaRequest) SetTokenUrl(v string) {
	o.TokenUrl = v
}

func (o PostInstanceOAuthOktaRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostInstanceOAuthOktaRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowedDomains) {
		toSerialize["allowedDomains"] = o.AllowedDomains
	}
	if !IsNil(o.AllowedGroups) {
		toSerialize["allowedGroups"] = o.AllowedGroups
	}
	toSerialize["apiUrl"] = o.ApiUrl
	toSerialize["authUrl"] = o.AuthUrl
	toSerialize["clientId"] = o.ClientId
	if !IsNil(o.ClientSecret) {
		toSerialize["clientSecret"] = o.ClientSecret
	}
	if !IsNil(o.RoleAttributePath) {
		toSerialize["roleAttributePath"] = o.RoleAttributePath
	}
	toSerialize["tokenUrl"] = o.TokenUrl

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PostInstanceOAuthOktaRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"apiUrl",
		"authUrl",
		"clientId",
		"tokenUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostInstanceOAuthOktaRequest := _PostInstanceOAuthOktaRequest{}

	err = json.Unmarshal(data, &varPostInstanceOAuthOktaRequest)

	if err != nil {
		return err
	}

	*o = PostInstanceOAuthOktaRequest(varPostInstanceOAuthOktaRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allowedDomains")
		delete(additionalProperties, "allowedGroups")
		delete(additionalProperties, "apiUrl")
		delete(additionalProperties, "authUrl")
		delete(additionalProperties, "clientId")
		delete(additionalProperties, "clientSecret")
		delete(additionalProperties, "roleAttributePath")
		delete(additionalProperties, "tokenUrl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePostInstanceOAuthOktaRequest struct {
	value *PostInstanceOAuthOktaRequest
	isSet bool
}

func (v NullablePostInstanceOAuthOktaRequest) Get() *PostInstanceOAuthOktaRequest {
	return v.value
}

func (v *NullablePostInstanceOAuthOktaRequest) Set(val *PostInstanceOAuthOktaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostInstanceOAuthOktaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostInstanceOAuthOktaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostInstanceOAuthOktaRequest(val *PostInstanceOAuthOktaRequest) *NullablePostInstanceOAuthOktaRequest {
	return &NullablePostInstanceOAuthOktaRequest{value: val, isSet: true}
}

func (v NullablePostInstanceOAuthOktaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostInstanceOAuthOktaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
