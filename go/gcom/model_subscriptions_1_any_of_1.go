/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the Subscriptions1AnyOf1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscriptions1AnyOf1{}

// Subscriptions1AnyOf1 struct for Subscriptions1AnyOf1
type Subscriptions1AnyOf1 struct {
	Current              Current4 `json:"current"`
	NextProduct          string   `json:"nextProduct"`
	Next                 Next     `json:"next"`
	AdditionalProperties map[string]interface{}
}

type _Subscriptions1AnyOf1 Subscriptions1AnyOf1

// NewSubscriptions1AnyOf1 instantiates a new Subscriptions1AnyOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptions1AnyOf1(current Current4, nextProduct string, next Next) *Subscriptions1AnyOf1 {
	this := Subscriptions1AnyOf1{}
	this.Current = current
	this.NextProduct = nextProduct
	this.Next = next
	return &this
}

// NewSubscriptions1AnyOf1WithDefaults instantiates a new Subscriptions1AnyOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptions1AnyOf1WithDefaults() *Subscriptions1AnyOf1 {
	this := Subscriptions1AnyOf1{}
	return &this
}

// GetCurrent returns the Current field value
func (o *Subscriptions1AnyOf1) GetCurrent() Current4 {
	if o == nil {
		var ret Current4
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *Subscriptions1AnyOf1) GetCurrentOk() (*Current4, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *Subscriptions1AnyOf1) SetCurrent(v Current4) {
	o.Current = v
}

// GetNextProduct returns the NextProduct field value
func (o *Subscriptions1AnyOf1) GetNextProduct() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NextProduct
}

// GetNextProductOk returns a tuple with the NextProduct field value
// and a boolean to check if the value has been set.
func (o *Subscriptions1AnyOf1) GetNextProductOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NextProduct, true
}

// SetNextProduct sets field value
func (o *Subscriptions1AnyOf1) SetNextProduct(v string) {
	o.NextProduct = v
}

// GetNext returns the Next field value
func (o *Subscriptions1AnyOf1) GetNext() Next {
	if o == nil {
		var ret Next
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
func (o *Subscriptions1AnyOf1) GetNextOk() (*Next, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *Subscriptions1AnyOf1) SetNext(v Next) {
	o.Next = v
}

func (o Subscriptions1AnyOf1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscriptions1AnyOf1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current"] = o.Current
	toSerialize["nextProduct"] = o.NextProduct
	toSerialize["next"] = o.Next

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Subscriptions1AnyOf1) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varSubscriptions1AnyOf1 := _Subscriptions1AnyOf1{}

	err = json.Unmarshal(data, &varSubscriptions1AnyOf1)

	if err != nil {
		return err
	}

	*o = Subscriptions1AnyOf1(varSubscriptions1AnyOf1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "current")
		delete(additionalProperties, "nextProduct")
		delete(additionalProperties, "next")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptions1AnyOf1 struct {
	value *Subscriptions1AnyOf1
	isSet bool
}

func (v NullableSubscriptions1AnyOf1) Get() *Subscriptions1AnyOf1 {
	return v.value
}

func (v *NullableSubscriptions1AnyOf1) Set(val *Subscriptions1AnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptions1AnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptions1AnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptions1AnyOf1(val *Subscriptions1AnyOf1) *NullableSubscriptions1AnyOf1 {
	return &NullableSubscriptions1AnyOf1{value: val, isSet: true}
}

func (v NullableSubscriptions1AnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptions1AnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
