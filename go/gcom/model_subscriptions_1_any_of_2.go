/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the Subscriptions1AnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Subscriptions1AnyOf2{}

// Subscriptions1AnyOf2 struct for Subscriptions1AnyOf2
type Subscriptions1AnyOf2 struct {
	Current              Current5    `json:"current"`
	NextProduct          interface{} `json:"nextProduct"`
	Next                 interface{} `json:"next"`
	AdditionalProperties map[string]interface{}
}

type _Subscriptions1AnyOf2 Subscriptions1AnyOf2

// NewSubscriptions1AnyOf2 instantiates a new Subscriptions1AnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptions1AnyOf2(current Current5, nextProduct interface{}, next interface{}) *Subscriptions1AnyOf2 {
	this := Subscriptions1AnyOf2{}
	this.Current = current
	this.NextProduct = nextProduct
	this.Next = next
	return &this
}

// NewSubscriptions1AnyOf2WithDefaults instantiates a new Subscriptions1AnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptions1AnyOf2WithDefaults() *Subscriptions1AnyOf2 {
	this := Subscriptions1AnyOf2{}
	return &this
}

// GetCurrent returns the Current field value
func (o *Subscriptions1AnyOf2) GetCurrent() Current5 {
	if o == nil {
		var ret Current5
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *Subscriptions1AnyOf2) GetCurrentOk() (*Current5, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *Subscriptions1AnyOf2) SetCurrent(v Current5) {
	o.Current = v
}

// GetNextProduct returns the NextProduct field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Subscriptions1AnyOf2) GetNextProduct() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.NextProduct
}

// GetNextProductOk returns a tuple with the NextProduct field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscriptions1AnyOf2) GetNextProductOk() (*interface{}, bool) {
	if o == nil || IsNil(o.NextProduct) {
		return nil, false
	}
	return &o.NextProduct, true
}

// SetNextProduct sets field value
func (o *Subscriptions1AnyOf2) SetNextProduct(v interface{}) {
	o.NextProduct = v
}

// GetNext returns the Next field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Subscriptions1AnyOf2) GetNext() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Next
}

// GetNextOk returns a tuple with the Next field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Subscriptions1AnyOf2) GetNextOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Next) {
		return nil, false
	}
	return &o.Next, true
}

// SetNext sets field value
func (o *Subscriptions1AnyOf2) SetNext(v interface{}) {
	o.Next = v
}

func (o Subscriptions1AnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Subscriptions1AnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["current"] = o.Current
	if o.NextProduct != nil {
		toSerialize["nextProduct"] = o.NextProduct
	}
	if o.Next != nil {
		toSerialize["next"] = o.Next
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Subscriptions1AnyOf2) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varSubscriptions1AnyOf2 := _Subscriptions1AnyOf2{}

	err = json.Unmarshal(data, &varSubscriptions1AnyOf2)

	if err != nil {
		return err
	}

	*o = Subscriptions1AnyOf2(varSubscriptions1AnyOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "current")
		delete(additionalProperties, "nextProduct")
		delete(additionalProperties, "next")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSubscriptions1AnyOf2 struct {
	value *Subscriptions1AnyOf2
	isSet bool
}

func (v NullableSubscriptions1AnyOf2) Get() *Subscriptions1AnyOf2 {
	return v.value
}

func (v *NullableSubscriptions1AnyOf2) Set(val *Subscriptions1AnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptions1AnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptions1AnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptions1AnyOf2(val *Subscriptions1AnyOf2) *NullableSubscriptions1AnyOf2 {
	return &NullableSubscriptions1AnyOf2{value: val, isSet: true}
}

func (v NullableSubscriptions1AnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptions1AnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
