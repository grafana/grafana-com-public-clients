/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the TenantsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantsInner{}

// TenantsInner struct for TenantsInner
type TenantsInner struct {
	Type                 *string  `json:"type,omitempty"`
	Id                   *float32 `json:"id,omitempty"`
	Info                 *Info    `json:"info,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TenantsInner TenantsInner

// NewTenantsInner instantiates a new TenantsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantsInner() *TenantsInner {
	this := TenantsInner{}
	return &this
}

// NewTenantsInnerWithDefaults instantiates a new TenantsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantsInnerWithDefaults() *TenantsInner {
	this := TenantsInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TenantsInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TenantsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TenantsInner) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TenantsInner) GetId() float32 {
	if o == nil || IsNil(o.Id) {
		var ret float32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsInner) GetIdOk() (*float32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TenantsInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given float32 and assigns it to the Id field.
func (o *TenantsInner) SetId(v float32) {
	o.Id = &v
}

// GetInfo returns the Info field value if set, zero value otherwise.
func (o *TenantsInner) GetInfo() Info {
	if o == nil || IsNil(o.Info) {
		var ret Info
		return ret
	}
	return *o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsInner) GetInfoOk() (*Info, bool) {
	if o == nil || IsNil(o.Info) {
		return nil, false
	}
	return o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *TenantsInner) HasInfo() bool {
	if o != nil && !IsNil(o.Info) {
		return true
	}

	return false
}

// SetInfo gets a reference to the given Info and assigns it to the Info field.
func (o *TenantsInner) SetInfo(v Info) {
	o.Info = &v
}

func (o TenantsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Info) {
		toSerialize["info"] = o.Info
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TenantsInner) UnmarshalJSON(data []byte) (err error) {
	varTenantsInner := _TenantsInner{}

	err = json.Unmarshal(data, &varTenantsInner)

	if err != nil {
		return err
	}

	*o = TenantsInner(varTenantsInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "id")
		delete(additionalProperties, "info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTenantsInner struct {
	value *TenantsInner
	isSet bool
}

func (v NullableTenantsInner) Get() *TenantsInner {
	return v.value
}

func (v *NullableTenantsInner) Set(val *TenantsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantsInner(val *TenantsInner) *NullableTenantsInner {
	return &NullableTenantsInner{value: val, isSet: true}
}

func (v NullableTenantsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
