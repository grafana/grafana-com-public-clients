/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"time"
)

// checks if the Current1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Current1{}

// Current1 struct for Current1
type Current1 struct {
	Product                *string        `json:"product,omitempty"`
	IsTrial                *bool          `json:"isTrial,omitempty"`
	StartDate              *time.Time     `json:"startDate,omitempty"`
	EndDate                *time.Time     `json:"endDate,omitempty"`
	Payload                *Payload       `json:"payload,omitempty"`
	Plan                   NullableString `json:"plan,omitempty"`
	PublicName             NullableString `json:"publicName,omitempty"`
	EnterprisePluginsAdded *bool          `json:"enterprisePluginsAdded,omitempty"`
	PlanBillingCycle       *string        `json:"planBillingCycle,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _Current1 Current1

// NewCurrent1 instantiates a new Current1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrent1() *Current1 {
	this := Current1{}
	return &this
}

// NewCurrent1WithDefaults instantiates a new Current1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrent1WithDefaults() *Current1 {
	this := Current1{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *Current1) GetProduct() string {
	if o == nil || IsNil(o.Product) {
		var ret string
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetProductOk() (*string, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *Current1) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given string and assigns it to the Product field.
func (o *Current1) SetProduct(v string) {
	o.Product = &v
}

// GetIsTrial returns the IsTrial field value if set, zero value otherwise.
func (o *Current1) GetIsTrial() bool {
	if o == nil || IsNil(o.IsTrial) {
		var ret bool
		return ret
	}
	return *o.IsTrial
}

// GetIsTrialOk returns a tuple with the IsTrial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetIsTrialOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTrial) {
		return nil, false
	}
	return o.IsTrial, true
}

// HasIsTrial returns a boolean if a field has been set.
func (o *Current1) HasIsTrial() bool {
	if o != nil && !IsNil(o.IsTrial) {
		return true
	}

	return false
}

// SetIsTrial gets a reference to the given bool and assigns it to the IsTrial field.
func (o *Current1) SetIsTrial(v bool) {
	o.IsTrial = &v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Current1) GetStartDate() time.Time {
	if o == nil || IsNil(o.StartDate) {
		var ret time.Time
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetStartDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Current1) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given time.Time and assigns it to the StartDate field.
func (o *Current1) SetStartDate(v time.Time) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *Current1) GetEndDate() time.Time {
	if o == nil || IsNil(o.EndDate) {
		var ret time.Time
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetEndDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *Current1) HasEndDate() bool {
	if o != nil && !IsNil(o.EndDate) {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given time.Time and assigns it to the EndDate field.
func (o *Current1) SetEndDate(v time.Time) {
	o.EndDate = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *Current1) GetPayload() Payload {
	if o == nil || IsNil(o.Payload) {
		var ret Payload
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetPayloadOk() (*Payload, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *Current1) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given Payload and assigns it to the Payload field.
func (o *Current1) SetPayload(v Payload) {
	o.Payload = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Current1) GetPlan() string {
	if o == nil || IsNil(o.Plan.Get()) {
		var ret string
		return ret
	}
	return *o.Plan.Get()
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Current1) GetPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plan.Get(), o.Plan.IsSet()
}

// HasPlan returns a boolean if a field has been set.
func (o *Current1) HasPlan() bool {
	if o != nil && o.Plan.IsSet() {
		return true
	}

	return false
}

// SetPlan gets a reference to the given NullableString and assigns it to the Plan field.
func (o *Current1) SetPlan(v string) {
	o.Plan.Set(&v)
}

// SetPlanNil sets the value for Plan to be an explicit nil
func (o *Current1) SetPlanNil() {
	o.Plan.Set(nil)
}

// UnsetPlan ensures that no value is present for Plan, not even an explicit nil
func (o *Current1) UnsetPlan() {
	o.Plan.Unset()
}

// GetPublicName returns the PublicName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Current1) GetPublicName() string {
	if o == nil || IsNil(o.PublicName.Get()) {
		var ret string
		return ret
	}
	return *o.PublicName.Get()
}

// GetPublicNameOk returns a tuple with the PublicName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Current1) GetPublicNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicName.Get(), o.PublicName.IsSet()
}

// HasPublicName returns a boolean if a field has been set.
func (o *Current1) HasPublicName() bool {
	if o != nil && o.PublicName.IsSet() {
		return true
	}

	return false
}

// SetPublicName gets a reference to the given NullableString and assigns it to the PublicName field.
func (o *Current1) SetPublicName(v string) {
	o.PublicName.Set(&v)
}

// SetPublicNameNil sets the value for PublicName to be an explicit nil
func (o *Current1) SetPublicNameNil() {
	o.PublicName.Set(nil)
}

// UnsetPublicName ensures that no value is present for PublicName, not even an explicit nil
func (o *Current1) UnsetPublicName() {
	o.PublicName.Unset()
}

// GetEnterprisePluginsAdded returns the EnterprisePluginsAdded field value if set, zero value otherwise.
func (o *Current1) GetEnterprisePluginsAdded() bool {
	if o == nil || IsNil(o.EnterprisePluginsAdded) {
		var ret bool
		return ret
	}
	return *o.EnterprisePluginsAdded
}

// GetEnterprisePluginsAddedOk returns a tuple with the EnterprisePluginsAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetEnterprisePluginsAddedOk() (*bool, bool) {
	if o == nil || IsNil(o.EnterprisePluginsAdded) {
		return nil, false
	}
	return o.EnterprisePluginsAdded, true
}

// HasEnterprisePluginsAdded returns a boolean if a field has been set.
func (o *Current1) HasEnterprisePluginsAdded() bool {
	if o != nil && !IsNil(o.EnterprisePluginsAdded) {
		return true
	}

	return false
}

// SetEnterprisePluginsAdded gets a reference to the given bool and assigns it to the EnterprisePluginsAdded field.
func (o *Current1) SetEnterprisePluginsAdded(v bool) {
	o.EnterprisePluginsAdded = &v
}

// GetPlanBillingCycle returns the PlanBillingCycle field value if set, zero value otherwise.
func (o *Current1) GetPlanBillingCycle() string {
	if o == nil || IsNil(o.PlanBillingCycle) {
		var ret string
		return ret
	}
	return *o.PlanBillingCycle
}

// GetPlanBillingCycleOk returns a tuple with the PlanBillingCycle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Current1) GetPlanBillingCycleOk() (*string, bool) {
	if o == nil || IsNil(o.PlanBillingCycle) {
		return nil, false
	}
	return o.PlanBillingCycle, true
}

// HasPlanBillingCycle returns a boolean if a field has been set.
func (o *Current1) HasPlanBillingCycle() bool {
	if o != nil && !IsNil(o.PlanBillingCycle) {
		return true
	}

	return false
}

// SetPlanBillingCycle gets a reference to the given string and assigns it to the PlanBillingCycle field.
func (o *Current1) SetPlanBillingCycle(v string) {
	o.PlanBillingCycle = &v
}

func (o Current1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Current1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.IsTrial) {
		toSerialize["isTrial"] = o.IsTrial
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.EndDate) {
		toSerialize["endDate"] = o.EndDate
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if o.Plan.IsSet() {
		toSerialize["plan"] = o.Plan.Get()
	}
	if o.PublicName.IsSet() {
		toSerialize["publicName"] = o.PublicName.Get()
	}
	if !IsNil(o.EnterprisePluginsAdded) {
		toSerialize["enterprisePluginsAdded"] = o.EnterprisePluginsAdded
	}
	if !IsNil(o.PlanBillingCycle) {
		toSerialize["planBillingCycle"] = o.PlanBillingCycle
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Current1) UnmarshalJSON(data []byte) (err error) {
	varCurrent1 := _Current1{}

	err = json.Unmarshal(data, &varCurrent1)

	if err != nil {
		return err
	}

	*o = Current1(varCurrent1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "product")
		delete(additionalProperties, "isTrial")
		delete(additionalProperties, "startDate")
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "payload")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "publicName")
		delete(additionalProperties, "enterprisePluginsAdded")
		delete(additionalProperties, "planBillingCycle")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCurrent1 struct {
	value *Current1
	isSet bool
}

func (v NullableCurrent1) Get() *Current1 {
	return v.value
}

func (v *NullableCurrent1) Set(val *Current1) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrent1) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrent1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrent1(val *Current1) *NullableCurrent1 {
	return &NullableCurrent1{value: val, isSet: true}
}

func (v NullableCurrent1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrent1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
