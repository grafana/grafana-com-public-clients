/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// FormattedApiOrgPublicAllowGCloudTrial struct for FormattedApiOrgPublicAllowGCloudTrial
type FormattedApiOrgPublicAllowGCloudTrial struct {
	bool    *bool
	float32 *float32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FormattedApiOrgPublicAllowGCloudTrial) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into bool
	err = json.Unmarshal(data, &dst.bool)
	if err == nil {
		jsonbool, _ := json.Marshal(dst.bool)
		if string(jsonbool) == "{}" { // empty struct
			dst.bool = nil
		} else {
			return nil // data stored in dst.bool, return on the first match
		}
	} else {
		dst.bool = nil
	}

	// try to unmarshal JSON data into float32
	err = json.Unmarshal(data, &dst.float32)
	if err == nil {
		jsonfloat32, _ := json.Marshal(dst.float32)
		if string(jsonfloat32) == "{}" { // empty struct
			dst.float32 = nil
		} else {
			return nil // data stored in dst.float32, return on the first match
		}
	} else {
		dst.float32 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FormattedApiOrgPublicAllowGCloudTrial)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FormattedApiOrgPublicAllowGCloudTrial) MarshalJSON() ([]byte, error) {
	if src.bool != nil {
		return json.Marshal(&src.bool)
	}

	if src.float32 != nil {
		return json.Marshal(&src.float32)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFormattedApiOrgPublicAllowGCloudTrial struct {
	value *FormattedApiOrgPublicAllowGCloudTrial
	isSet bool
}

func (v NullableFormattedApiOrgPublicAllowGCloudTrial) Get() *FormattedApiOrgPublicAllowGCloudTrial {
	return v.value
}

func (v *NullableFormattedApiOrgPublicAllowGCloudTrial) Set(val *FormattedApiOrgPublicAllowGCloudTrial) {
	v.value = val
	v.isSet = true
}

func (v NullableFormattedApiOrgPublicAllowGCloudTrial) IsSet() bool {
	return v.isSet
}

func (v *NullableFormattedApiOrgPublicAllowGCloudTrial) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormattedApiOrgPublicAllowGCloudTrial(val *FormattedApiOrgPublicAllowGCloudTrial) *NullableFormattedApiOrgPublicAllowGCloudTrial {
	return &NullableFormattedApiOrgPublicAllowGCloudTrial{value: val, isSet: true}
}

func (v NullableFormattedApiOrgPublicAllowGCloudTrial) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormattedApiOrgPublicAllowGCloudTrial) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
