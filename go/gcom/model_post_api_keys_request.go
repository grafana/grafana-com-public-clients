/*
GCOM API

 Grafana.com API (or GCOM). This documentation includes all endpoints of GCOM API including the staff ones.  Looking for GCOM API client packages? You can find them at [grafana-com-clients](https://github.com/grafana/grafana-com-clients) repository.  If you have any questions, please contact us at #grafana_com on Slack or open an issue at [Grafana-com repository](https://github.com/grafana/grafana-com/issues/new).  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: internal
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PostApiKeysRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostApiKeysRequest{}

// PostApiKeysRequest struct for PostApiKeysRequest
type PostApiKeysRequest struct {
	Name string `json:"name"`
	Role string `json:"role"`
}

type _PostApiKeysRequest PostApiKeysRequest

// NewPostApiKeysRequest instantiates a new PostApiKeysRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostApiKeysRequest(name string, role string) *PostApiKeysRequest {
	this := PostApiKeysRequest{}
	this.Name = name
	this.Role = role
	return &this
}

// NewPostApiKeysRequestWithDefaults instantiates a new PostApiKeysRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostApiKeysRequestWithDefaults() *PostApiKeysRequest {
	this := PostApiKeysRequest{}
	return &this
}

// GetName returns the Name field value
func (o *PostApiKeysRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostApiKeysRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostApiKeysRequest) SetName(v string) {
	o.Name = v
}

// GetRole returns the Role field value
func (o *PostApiKeysRequest) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PostApiKeysRequest) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PostApiKeysRequest) SetRole(v string) {
	o.Role = v
}

func (o PostApiKeysRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostApiKeysRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *PostApiKeysRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostApiKeysRequest := _PostApiKeysRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostApiKeysRequest)

	if err != nil {
		return err
	}

	*o = PostApiKeysRequest(varPostApiKeysRequest)

	return err
}

type NullablePostApiKeysRequest struct {
	value *PostApiKeysRequest
	isSet bool
}

func (v NullablePostApiKeysRequest) Get() *PostApiKeysRequest {
	return v.value
}

func (v *NullablePostApiKeysRequest) Set(val *PostApiKeysRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostApiKeysRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostApiKeysRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostApiKeysRequest(val *PostApiKeysRequest) *NullablePostApiKeysRequest {
	return &NullablePostApiKeysRequest{value: val, isSet: true}
}

func (v NullablePostApiKeysRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostApiKeysRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
