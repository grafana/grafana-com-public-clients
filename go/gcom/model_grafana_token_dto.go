/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"time"
)

// checks if the GrafanaTokenDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GrafanaTokenDTO{}

// GrafanaTokenDTO struct for GrafanaTokenDTO
type GrafanaTokenDTO struct {
	Created                *time.Time `json:"created,omitempty"`
	Expiration             *time.Time `json:"expiration,omitempty"`
	HasExpired             *bool      `json:"hasExpired,omitempty"`
	Id                     *int64     `json:"id,omitempty"`
	IsRevoked              *bool      `json:"isRevoked,omitempty"`
	LastUsedAt             *time.Time `json:"lastUsedAt,omitempty"`
	Name                   *string    `json:"name,omitempty"`
	SecondsUntilExpiration *float64   `json:"secondsUntilExpiration,omitempty"`
	AdditionalProperties   map[string]interface{}
}

type _GrafanaTokenDTO GrafanaTokenDTO

// NewGrafanaTokenDTO instantiates a new GrafanaTokenDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGrafanaTokenDTO() *GrafanaTokenDTO {
	this := GrafanaTokenDTO{}
	return &this
}

// NewGrafanaTokenDTOWithDefaults instantiates a new GrafanaTokenDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGrafanaTokenDTOWithDefaults() *GrafanaTokenDTO {
	this := GrafanaTokenDTO{}
	return &this
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *GrafanaTokenDTO) SetCreated(v time.Time) {
	o.Created = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetExpiration() time.Time {
	if o == nil || IsNil(o.Expiration) {
		var ret time.Time
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetExpirationOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given time.Time and assigns it to the Expiration field.
func (o *GrafanaTokenDTO) SetExpiration(v time.Time) {
	o.Expiration = &v
}

// GetHasExpired returns the HasExpired field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetHasExpired() bool {
	if o == nil || IsNil(o.HasExpired) {
		var ret bool
		return ret
	}
	return *o.HasExpired
}

// GetHasExpiredOk returns a tuple with the HasExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetHasExpiredOk() (*bool, bool) {
	if o == nil || IsNil(o.HasExpired) {
		return nil, false
	}
	return o.HasExpired, true
}

// HasHasExpired returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasHasExpired() bool {
	if o != nil && !IsNil(o.HasExpired) {
		return true
	}

	return false
}

// SetHasExpired gets a reference to the given bool and assigns it to the HasExpired field.
func (o *GrafanaTokenDTO) SetHasExpired(v bool) {
	o.HasExpired = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *GrafanaTokenDTO) SetId(v int64) {
	o.Id = &v
}

// GetIsRevoked returns the IsRevoked field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetIsRevoked() bool {
	if o == nil || IsNil(o.IsRevoked) {
		var ret bool
		return ret
	}
	return *o.IsRevoked
}

// GetIsRevokedOk returns a tuple with the IsRevoked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetIsRevokedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRevoked) {
		return nil, false
	}
	return o.IsRevoked, true
}

// HasIsRevoked returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasIsRevoked() bool {
	if o != nil && !IsNil(o.IsRevoked) {
		return true
	}

	return false
}

// SetIsRevoked gets a reference to the given bool and assigns it to the IsRevoked field.
func (o *GrafanaTokenDTO) SetIsRevoked(v bool) {
	o.IsRevoked = &v
}

// GetLastUsedAt returns the LastUsedAt field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetLastUsedAt() time.Time {
	if o == nil || IsNil(o.LastUsedAt) {
		var ret time.Time
		return ret
	}
	return *o.LastUsedAt
}

// GetLastUsedAtOk returns a tuple with the LastUsedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetLastUsedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsedAt) {
		return nil, false
	}
	return o.LastUsedAt, true
}

// HasLastUsedAt returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasLastUsedAt() bool {
	if o != nil && !IsNil(o.LastUsedAt) {
		return true
	}

	return false
}

// SetLastUsedAt gets a reference to the given time.Time and assigns it to the LastUsedAt field.
func (o *GrafanaTokenDTO) SetLastUsedAt(v time.Time) {
	o.LastUsedAt = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GrafanaTokenDTO) SetName(v string) {
	o.Name = &v
}

// GetSecondsUntilExpiration returns the SecondsUntilExpiration field value if set, zero value otherwise.
func (o *GrafanaTokenDTO) GetSecondsUntilExpiration() float64 {
	if o == nil || IsNil(o.SecondsUntilExpiration) {
		var ret float64
		return ret
	}
	return *o.SecondsUntilExpiration
}

// GetSecondsUntilExpirationOk returns a tuple with the SecondsUntilExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GrafanaTokenDTO) GetSecondsUntilExpirationOk() (*float64, bool) {
	if o == nil || IsNil(o.SecondsUntilExpiration) {
		return nil, false
	}
	return o.SecondsUntilExpiration, true
}

// HasSecondsUntilExpiration returns a boolean if a field has been set.
func (o *GrafanaTokenDTO) HasSecondsUntilExpiration() bool {
	if o != nil && !IsNil(o.SecondsUntilExpiration) {
		return true
	}

	return false
}

// SetSecondsUntilExpiration gets a reference to the given float64 and assigns it to the SecondsUntilExpiration field.
func (o *GrafanaTokenDTO) SetSecondsUntilExpiration(v float64) {
	o.SecondsUntilExpiration = &v
}

func (o GrafanaTokenDTO) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GrafanaTokenDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.HasExpired) {
		toSerialize["hasExpired"] = o.HasExpired
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsRevoked) {
		toSerialize["isRevoked"] = o.IsRevoked
	}
	if !IsNil(o.LastUsedAt) {
		toSerialize["lastUsedAt"] = o.LastUsedAt
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SecondsUntilExpiration) {
		toSerialize["secondsUntilExpiration"] = o.SecondsUntilExpiration
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GrafanaTokenDTO) UnmarshalJSON(data []byte) (err error) {
	varGrafanaTokenDTO := _GrafanaTokenDTO{}

	err = json.Unmarshal(data, &varGrafanaTokenDTO)

	if err != nil {
		return err
	}

	*o = GrafanaTokenDTO(varGrafanaTokenDTO)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "expiration")
		delete(additionalProperties, "hasExpired")
		delete(additionalProperties, "id")
		delete(additionalProperties, "isRevoked")
		delete(additionalProperties, "lastUsedAt")
		delete(additionalProperties, "name")
		delete(additionalProperties, "secondsUntilExpiration")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGrafanaTokenDTO struct {
	value *GrafanaTokenDTO
	isSet bool
}

func (v NullableGrafanaTokenDTO) Get() *GrafanaTokenDTO {
	return v.value
}

func (v *NullableGrafanaTokenDTO) Set(val *GrafanaTokenDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableGrafanaTokenDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableGrafanaTokenDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGrafanaTokenDTO(val *GrafanaTokenDTO) *NullableGrafanaTokenDTO {
	return &NullableGrafanaTokenDTO{value: val, isSet: true}
}

func (v NullableGrafanaTokenDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGrafanaTokenDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
