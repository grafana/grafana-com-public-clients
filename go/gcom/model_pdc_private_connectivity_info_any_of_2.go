/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PdcPrivateConnectivityInfoAnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PdcPrivateConnectivityInfoAnyOf2{}

// PdcPrivateConnectivityInfoAnyOf2 struct for PdcPrivateConnectivityInfoAnyOf2
type PdcPrivateConnectivityInfoAnyOf2 struct {
	Mimir                Mimir                                   `json:"mimir"`
	Graphite             *Graphite                               `json:"graphite,omitempty"`
	Otlp                 NullablePdcPrivateConnectivityInfoAnyOf `json:"otlp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PdcPrivateConnectivityInfoAnyOf2 PdcPrivateConnectivityInfoAnyOf2

// NewPdcPrivateConnectivityInfoAnyOf2 instantiates a new PdcPrivateConnectivityInfoAnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPdcPrivateConnectivityInfoAnyOf2(mimir Mimir) *PdcPrivateConnectivityInfoAnyOf2 {
	this := PdcPrivateConnectivityInfoAnyOf2{}
	this.Mimir = mimir
	return &this
}

// NewPdcPrivateConnectivityInfoAnyOf2WithDefaults instantiates a new PdcPrivateConnectivityInfoAnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPdcPrivateConnectivityInfoAnyOf2WithDefaults() *PdcPrivateConnectivityInfoAnyOf2 {
	this := PdcPrivateConnectivityInfoAnyOf2{}
	return &this
}

// GetMimir returns the Mimir field value
func (o *PdcPrivateConnectivityInfoAnyOf2) GetMimir() Mimir {
	if o == nil {
		var ret Mimir
		return ret
	}

	return o.Mimir
}

// GetMimirOk returns a tuple with the Mimir field value
// and a boolean to check if the value has been set.
func (o *PdcPrivateConnectivityInfoAnyOf2) GetMimirOk() (*Mimir, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mimir, true
}

// SetMimir sets field value
func (o *PdcPrivateConnectivityInfoAnyOf2) SetMimir(v Mimir) {
	o.Mimir = v
}

// GetGraphite returns the Graphite field value if set, zero value otherwise.
func (o *PdcPrivateConnectivityInfoAnyOf2) GetGraphite() Graphite {
	if o == nil || IsNil(o.Graphite) {
		var ret Graphite
		return ret
	}
	return *o.Graphite
}

// GetGraphiteOk returns a tuple with the Graphite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PdcPrivateConnectivityInfoAnyOf2) GetGraphiteOk() (*Graphite, bool) {
	if o == nil || IsNil(o.Graphite) {
		return nil, false
	}
	return o.Graphite, true
}

// HasGraphite returns a boolean if a field has been set.
func (o *PdcPrivateConnectivityInfoAnyOf2) HasGraphite() bool {
	if o != nil && !IsNil(o.Graphite) {
		return true
	}

	return false
}

// SetGraphite gets a reference to the given Graphite and assigns it to the Graphite field.
func (o *PdcPrivateConnectivityInfoAnyOf2) SetGraphite(v Graphite) {
	o.Graphite = &v
}

// GetOtlp returns the Otlp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PdcPrivateConnectivityInfoAnyOf2) GetOtlp() PdcPrivateConnectivityInfoAnyOf {
	if o == nil || IsNil(o.Otlp.Get()) {
		var ret PdcPrivateConnectivityInfoAnyOf
		return ret
	}
	return *o.Otlp.Get()
}

// GetOtlpOk returns a tuple with the Otlp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PdcPrivateConnectivityInfoAnyOf2) GetOtlpOk() (*PdcPrivateConnectivityInfoAnyOf, bool) {
	if o == nil {
		return nil, false
	}
	return o.Otlp.Get(), o.Otlp.IsSet()
}

// HasOtlp returns a boolean if a field has been set.
func (o *PdcPrivateConnectivityInfoAnyOf2) HasOtlp() bool {
	if o != nil && o.Otlp.IsSet() {
		return true
	}

	return false
}

// SetOtlp gets a reference to the given NullablePdcPrivateConnectivityInfoAnyOf and assigns it to the Otlp field.
func (o *PdcPrivateConnectivityInfoAnyOf2) SetOtlp(v PdcPrivateConnectivityInfoAnyOf) {
	o.Otlp.Set(&v)
}

// SetOtlpNil sets the value for Otlp to be an explicit nil
func (o *PdcPrivateConnectivityInfoAnyOf2) SetOtlpNil() {
	o.Otlp.Set(nil)
}

// UnsetOtlp ensures that no value is present for Otlp, not even an explicit nil
func (o *PdcPrivateConnectivityInfoAnyOf2) UnsetOtlp() {
	o.Otlp.Unset()
}

func (o PdcPrivateConnectivityInfoAnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PdcPrivateConnectivityInfoAnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mimir"] = o.Mimir
	if !IsNil(o.Graphite) {
		toSerialize["graphite"] = o.Graphite
	}
	if o.Otlp.IsSet() {
		toSerialize["otlp"] = o.Otlp.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PdcPrivateConnectivityInfoAnyOf2) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varPdcPrivateConnectivityInfoAnyOf2 := _PdcPrivateConnectivityInfoAnyOf2{}

	err = json.Unmarshal(data, &varPdcPrivateConnectivityInfoAnyOf2)

	if err != nil {
		return err
	}

	*o = PdcPrivateConnectivityInfoAnyOf2(varPdcPrivateConnectivityInfoAnyOf2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "mimir")
		delete(additionalProperties, "graphite")
		delete(additionalProperties, "otlp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePdcPrivateConnectivityInfoAnyOf2 struct {
	value *PdcPrivateConnectivityInfoAnyOf2
	isSet bool
}

func (v NullablePdcPrivateConnectivityInfoAnyOf2) Get() *PdcPrivateConnectivityInfoAnyOf2 {
	return v.value
}

func (v *NullablePdcPrivateConnectivityInfoAnyOf2) Set(val *PdcPrivateConnectivityInfoAnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullablePdcPrivateConnectivityInfoAnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullablePdcPrivateConnectivityInfoAnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePdcPrivateConnectivityInfoAnyOf2(val *PdcPrivateConnectivityInfoAnyOf2) *NullablePdcPrivateConnectivityInfoAnyOf2 {
	return &NullablePdcPrivateConnectivityInfoAnyOf2{value: val, isSet: true}
}

func (v NullablePdcPrivateConnectivityInfoAnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePdcPrivateConnectivityInfoAnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
