/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the UsagesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsagesInner{}

// UsagesInner struct for UsagesInner
type UsagesInner struct {
	StackName            string                 `json:"stackName"`
	StackLabels          map[string]interface{} `json:"stackLabels"`
	AdditionalProperties map[string]interface{}
}

type _UsagesInner UsagesInner

// NewUsagesInner instantiates a new UsagesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsagesInner(stackName string, stackLabels map[string]interface{}) *UsagesInner {
	this := UsagesInner{}
	this.StackName = stackName
	this.StackLabels = stackLabels
	return &this
}

// NewUsagesInnerWithDefaults instantiates a new UsagesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsagesInnerWithDefaults() *UsagesInner {
	this := UsagesInner{}
	return &this
}

// GetStackName returns the StackName field value
func (o *UsagesInner) GetStackName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StackName
}

// GetStackNameOk returns a tuple with the StackName field value
// and a boolean to check if the value has been set.
func (o *UsagesInner) GetStackNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackName, true
}

// SetStackName sets field value
func (o *UsagesInner) SetStackName(v string) {
	o.StackName = v
}

// GetStackLabels returns the StackLabels field value
func (o *UsagesInner) GetStackLabels() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.StackLabels
}

// GetStackLabelsOk returns a tuple with the StackLabels field value
// and a boolean to check if the value has been set.
func (o *UsagesInner) GetStackLabelsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.StackLabels, true
}

// SetStackLabels sets field value
func (o *UsagesInner) SetStackLabels(v map[string]interface{}) {
	o.StackLabels = v
}

func (o UsagesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsagesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["stackName"] = o.StackName
	toSerialize["stackLabels"] = o.StackLabels

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UsagesInner) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varUsagesInner := _UsagesInner{}

	err = json.Unmarshal(data, &varUsagesInner)

	if err != nil {
		return err
	}

	*o = UsagesInner(varUsagesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stackName")
		delete(additionalProperties, "stackLabels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsagesInner struct {
	value *UsagesInner
	isSet bool
}

func (v NullableUsagesInner) Get() *UsagesInner {
	return v.value
}

func (v *NullableUsagesInner) Set(val *UsagesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableUsagesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableUsagesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsagesInner(val *UsagesInner) *NullableUsagesInner {
	return &NullableUsagesInner{value: val, isSet: true}
}

func (v NullableUsagesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsagesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
