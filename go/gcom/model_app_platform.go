/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AppPlatform type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppPlatform{}

// AppPlatform struct for AppPlatform
type AppPlatform struct {
	Url                  *string        `json:"url,omitempty"`
	CaData               NullableString `json:"caData,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AppPlatform AppPlatform

// NewAppPlatform instantiates a new AppPlatform object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPlatform() *AppPlatform {
	this := AppPlatform{}
	return &this
}

// NewAppPlatformWithDefaults instantiates a new AppPlatform object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPlatformWithDefaults() *AppPlatform {
	this := AppPlatform{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AppPlatform) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPlatform) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AppPlatform) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AppPlatform) SetUrl(v string) {
	o.Url = &v
}

// GetCaData returns the CaData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppPlatform) GetCaData() string {
	if o == nil || IsNil(o.CaData.Get()) {
		var ret string
		return ret
	}
	return *o.CaData.Get()
}

// GetCaDataOk returns a tuple with the CaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppPlatform) GetCaDataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaData.Get(), o.CaData.IsSet()
}

// HasCaData returns a boolean if a field has been set.
func (o *AppPlatform) HasCaData() bool {
	if o != nil && o.CaData.IsSet() {
		return true
	}

	return false
}

// SetCaData gets a reference to the given NullableString and assigns it to the CaData field.
func (o *AppPlatform) SetCaData(v string) {
	o.CaData.Set(&v)
}

// SetCaDataNil sets the value for CaData to be an explicit nil
func (o *AppPlatform) SetCaDataNil() {
	o.CaData.Set(nil)
}

// UnsetCaData ensures that no value is present for CaData, not even an explicit nil
func (o *AppPlatform) UnsetCaData() {
	o.CaData.Unset()
}

func (o AppPlatform) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppPlatform) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if o.CaData.IsSet() {
		toSerialize["caData"] = o.CaData.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppPlatform) UnmarshalJSON(data []byte) (err error) {
	varAppPlatform := _AppPlatform{}

	err = json.Unmarshal(data, &varAppPlatform)

	if err != nil {
		return err
	}

	*o = AppPlatform(varAppPlatform)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "url")
		delete(additionalProperties, "caData")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppPlatform struct {
	value *AppPlatform
	isSet bool
}

func (v NullableAppPlatform) Get() *AppPlatform {
	return v.value
}

func (v *NullableAppPlatform) Set(val *AppPlatform) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPlatform) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPlatform) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPlatform(val *AppPlatform) *NullableAppPlatform {
	return &NullableAppPlatform{value: val, isSet: true}
}

func (v NullableAppPlatform) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPlatform) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
