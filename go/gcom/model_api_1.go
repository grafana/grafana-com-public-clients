/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the Api1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Api1{}

// Api1 struct for Api1
type Api1 struct {
	PrivateDNS           string   `json:"privateDNS"`
	ServiceName          string   `json:"serviceName"`
	Regions              []string `json:"regions,omitempty"`
	EndpointName         *string  `json:"endpointName,omitempty"`
	ServiceId            *string  `json:"serviceId,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Api1 Api1

// NewApi1 instantiates a new Api1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApi1(privateDNS string, serviceName string) *Api1 {
	this := Api1{}
	this.PrivateDNS = privateDNS
	this.ServiceName = serviceName
	return &this
}

// NewApi1WithDefaults instantiates a new Api1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApi1WithDefaults() *Api1 {
	this := Api1{}
	return &this
}

// GetPrivateDNS returns the PrivateDNS field value
func (o *Api1) GetPrivateDNS() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateDNS
}

// GetPrivateDNSOk returns a tuple with the PrivateDNS field value
// and a boolean to check if the value has been set.
func (o *Api1) GetPrivateDNSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateDNS, true
}

// SetPrivateDNS sets field value
func (o *Api1) SetPrivateDNS(v string) {
	o.PrivateDNS = v
}

// GetServiceName returns the ServiceName field value
func (o *Api1) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *Api1) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *Api1) SetServiceName(v string) {
	o.ServiceName = v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Api1) GetRegions() []string {
	if o == nil || IsNil(o.Regions) {
		var ret []string
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Api1) GetRegionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Api1) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []string and assigns it to the Regions field.
func (o *Api1) SetRegions(v []string) {
	o.Regions = v
}

// GetEndpointName returns the EndpointName field value if set, zero value otherwise.
func (o *Api1) GetEndpointName() string {
	if o == nil || IsNil(o.EndpointName) {
		var ret string
		return ret
	}
	return *o.EndpointName
}

// GetEndpointNameOk returns a tuple with the EndpointName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Api1) GetEndpointNameOk() (*string, bool) {
	if o == nil || IsNil(o.EndpointName) {
		return nil, false
	}
	return o.EndpointName, true
}

// HasEndpointName returns a boolean if a field has been set.
func (o *Api1) HasEndpointName() bool {
	if o != nil && !IsNil(o.EndpointName) {
		return true
	}

	return false
}

// SetEndpointName gets a reference to the given string and assigns it to the EndpointName field.
func (o *Api1) SetEndpointName(v string) {
	o.EndpointName = &v
}

// GetServiceId returns the ServiceId field value if set, zero value otherwise.
func (o *Api1) GetServiceId() string {
	if o == nil || IsNil(o.ServiceId) {
		var ret string
		return ret
	}
	return *o.ServiceId
}

// GetServiceIdOk returns a tuple with the ServiceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Api1) GetServiceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceId) {
		return nil, false
	}
	return o.ServiceId, true
}

// HasServiceId returns a boolean if a field has been set.
func (o *Api1) HasServiceId() bool {
	if o != nil && !IsNil(o.ServiceId) {
		return true
	}

	return false
}

// SetServiceId gets a reference to the given string and assigns it to the ServiceId field.
func (o *Api1) SetServiceId(v string) {
	o.ServiceId = &v
}

func (o Api1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Api1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["privateDNS"] = o.PrivateDNS
	toSerialize["serviceName"] = o.ServiceName
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.EndpointName) {
		toSerialize["endpointName"] = o.EndpointName
	}
	if !IsNil(o.ServiceId) {
		toSerialize["serviceId"] = o.ServiceId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Api1) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varApi1 := _Api1{}

	err = json.Unmarshal(data, &varApi1)

	if err != nil {
		return err
	}

	*o = Api1(varApi1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "privateDNS")
		delete(additionalProperties, "serviceName")
		delete(additionalProperties, "regions")
		delete(additionalProperties, "endpointName")
		delete(additionalProperties, "serviceId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApi1 struct {
	value *Api1
	isSet bool
}

func (v NullableApi1) Get() *Api1 {
	return v.value
}

func (v *NullableApi1) Set(val *Api1) {
	v.value = val
	v.isSet = true
}

func (v NullableApi1) IsSet() bool {
	return v.isSet
}

func (v *NullableApi1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApi1(val *Api1) *NullableApi1 {
	return &NullableApi1{value: val, isSet: true}
}

func (v NullableApi1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApi1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
