/*
GCOM API

 Grafana.com API (or GCOM). This documentation includes all endpoints of GCOM API including the staff ones.  Looking for GCOM API client packages? You can find them at [grafana-com-clients](https://github.com/grafana/grafana-com-clients) repository.  If you have any questions, please contact us at #grafana_com on Slack or open an issue at [Grafana-com repository](https://github.com/grafana/grafana-com/issues/new).  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise       

API version: internal
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
	"bytes"
)

// FormattedApiStackRegion struct for FormattedApiStackRegion
type FormattedApiStackRegion struct {
	FormattedApiStackRegionAnyOf *FormattedApiStackRegionAnyOf
	FormattedApiStackRegionAnyOf1 *FormattedApiStackRegionAnyOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FormattedApiStackRegion) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FormattedApiStackRegionAnyOf
	err = json.Unmarshal(data, &dst.FormattedApiStackRegionAnyOf);
	if err == nil {
		jsonFormattedApiStackRegionAnyOf, _ := json.Marshal(dst.FormattedApiStackRegionAnyOf)
		if string(jsonFormattedApiStackRegionAnyOf) == "{}" { // empty struct
			dst.FormattedApiStackRegionAnyOf = nil
		} else {
			return nil // data stored in dst.FormattedApiStackRegionAnyOf, return on the first match
		}
	} else {
		dst.FormattedApiStackRegionAnyOf = nil
	}

	// try to unmarshal JSON data into FormattedApiStackRegionAnyOf1
	err = json.Unmarshal(data, &dst.FormattedApiStackRegionAnyOf1);
	if err == nil {
		jsonFormattedApiStackRegionAnyOf1, _ := json.Marshal(dst.FormattedApiStackRegionAnyOf1)
		if string(jsonFormattedApiStackRegionAnyOf1) == "{}" { // empty struct
			dst.FormattedApiStackRegionAnyOf1 = nil
		} else {
			return nil // data stored in dst.FormattedApiStackRegionAnyOf1, return on the first match
		}
	} else {
		dst.FormattedApiStackRegionAnyOf1 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(FormattedApiStackRegion)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FormattedApiStackRegion) MarshalJSON() ([]byte, error) {
	if src.FormattedApiStackRegionAnyOf != nil {
		return json.Marshal(&src.FormattedApiStackRegionAnyOf)
	}

	if src.FormattedApiStackRegionAnyOf1 != nil {
		return json.Marshal(&src.FormattedApiStackRegionAnyOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFormattedApiStackRegion struct {
	value *FormattedApiStackRegion
	isSet bool
}

func (v NullableFormattedApiStackRegion) Get() *FormattedApiStackRegion {
	return v.value
}

func (v *NullableFormattedApiStackRegion) Set(val *FormattedApiStackRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableFormattedApiStackRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableFormattedApiStackRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormattedApiStackRegion(val *FormattedApiStackRegion) *NullableFormattedApiStackRegion {
	return &NullableFormattedApiStackRegion{value: val, isSet: true}
}

func (v NullableFormattedApiStackRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormattedApiStackRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


