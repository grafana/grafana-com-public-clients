/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the PostAllApiKeys401ResponseDebuggingHelp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAllApiKeys401ResponseDebuggingHelp{}

// PostAllApiKeys401ResponseDebuggingHelp struct for PostAllApiKeys401ResponseDebuggingHelp
type PostAllApiKeys401ResponseDebuggingHelp struct {
	Command              *string `json:"command,omitempty"`
	Message              *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PostAllApiKeys401ResponseDebuggingHelp PostAllApiKeys401ResponseDebuggingHelp

// NewPostAllApiKeys401ResponseDebuggingHelp instantiates a new PostAllApiKeys401ResponseDebuggingHelp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAllApiKeys401ResponseDebuggingHelp() *PostAllApiKeys401ResponseDebuggingHelp {
	this := PostAllApiKeys401ResponseDebuggingHelp{}
	return &this
}

// NewPostAllApiKeys401ResponseDebuggingHelpWithDefaults instantiates a new PostAllApiKeys401ResponseDebuggingHelp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAllApiKeys401ResponseDebuggingHelpWithDefaults() *PostAllApiKeys401ResponseDebuggingHelp {
	this := PostAllApiKeys401ResponseDebuggingHelp{}
	return &this
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *PostAllApiKeys401ResponseDebuggingHelp) GetCommand() string {
	if o == nil || IsNil(o.Command) {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAllApiKeys401ResponseDebuggingHelp) GetCommandOk() (*string, bool) {
	if o == nil || IsNil(o.Command) {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *PostAllApiKeys401ResponseDebuggingHelp) HasCommand() bool {
	if o != nil && !IsNil(o.Command) {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *PostAllApiKeys401ResponseDebuggingHelp) SetCommand(v string) {
	o.Command = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PostAllApiKeys401ResponseDebuggingHelp) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostAllApiKeys401ResponseDebuggingHelp) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PostAllApiKeys401ResponseDebuggingHelp) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PostAllApiKeys401ResponseDebuggingHelp) SetMessage(v string) {
	o.Message = &v
}

func (o PostAllApiKeys401ResponseDebuggingHelp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAllApiKeys401ResponseDebuggingHelp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Command) {
		toSerialize["command"] = o.Command
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PostAllApiKeys401ResponseDebuggingHelp) UnmarshalJSON(data []byte) (err error) {
	varPostAllApiKeys401ResponseDebuggingHelp := _PostAllApiKeys401ResponseDebuggingHelp{}

	err = json.Unmarshal(data, &varPostAllApiKeys401ResponseDebuggingHelp)

	if err != nil {
		return err
	}

	*o = PostAllApiKeys401ResponseDebuggingHelp(varPostAllApiKeys401ResponseDebuggingHelp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "command")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePostAllApiKeys401ResponseDebuggingHelp struct {
	value *PostAllApiKeys401ResponseDebuggingHelp
	isSet bool
}

func (v NullablePostAllApiKeys401ResponseDebuggingHelp) Get() *PostAllApiKeys401ResponseDebuggingHelp {
	return v.value
}

func (v *NullablePostAllApiKeys401ResponseDebuggingHelp) Set(val *PostAllApiKeys401ResponseDebuggingHelp) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAllApiKeys401ResponseDebuggingHelp) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAllApiKeys401ResponseDebuggingHelp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAllApiKeys401ResponseDebuggingHelp(val *PostAllApiKeys401ResponseDebuggingHelp) *NullablePostAllApiKeys401ResponseDebuggingHelp {
	return &NullablePostAllApiKeys401ResponseDebuggingHelp{value: val, isSet: true}
}

func (v NullablePostAllApiKeys401ResponseDebuggingHelp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAllApiKeys401ResponseDebuggingHelp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
