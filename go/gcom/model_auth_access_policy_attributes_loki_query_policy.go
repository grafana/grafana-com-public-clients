/*
GCOM API

 Grafana.com API (or GCOM). This documentation includes all endpoints of GCOM API including the staff ones.  Looking for GCOM API client packages? You can find them at [grafana-com-clients](https://github.com/grafana/grafana-com-clients) repository.  If you have any questions, please contact us at #grafana_com on Slack or open an issue at [Grafana-com repository](https://github.com/grafana/grafana-com/issues/new).  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: internal
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the AuthAccessPolicyAttributesLokiQueryPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthAccessPolicyAttributesLokiQueryPolicy{}

// AuthAccessPolicyAttributesLokiQueryPolicy struct for AuthAccessPolicyAttributesLokiQueryPolicy
type AuthAccessPolicyAttributesLokiQueryPolicy struct {
	// String which represents a duration. For example \"10s\", \"2w\", \"5h\".
	QueryTimeout *string `json:"queryTimeout,omitempty"`
	// Ordinary integer.
	MaxEntriesLimitPerQuery *int32 `json:"maxEntriesLimitPerQuery,omitempty"`
	// String which represents a duration. For example \"10s\", \"2w\", \"5h\".
	MaxQueryLookback *string `json:"maxQueryLookback,omitempty"`
	// String which represents a duration. For example \"10s\", \"2w\", \"5h\".
	MaxQueryLength       *string `json:"maxQueryLength,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthAccessPolicyAttributesLokiQueryPolicy AuthAccessPolicyAttributesLokiQueryPolicy

// NewAuthAccessPolicyAttributesLokiQueryPolicy instantiates a new AuthAccessPolicyAttributesLokiQueryPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthAccessPolicyAttributesLokiQueryPolicy() *AuthAccessPolicyAttributesLokiQueryPolicy {
	this := AuthAccessPolicyAttributesLokiQueryPolicy{}
	return &this
}

// NewAuthAccessPolicyAttributesLokiQueryPolicyWithDefaults instantiates a new AuthAccessPolicyAttributesLokiQueryPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthAccessPolicyAttributesLokiQueryPolicyWithDefaults() *AuthAccessPolicyAttributesLokiQueryPolicy {
	this := AuthAccessPolicyAttributesLokiQueryPolicy{}
	return &this
}

// GetQueryTimeout returns the QueryTimeout field value if set, zero value otherwise.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetQueryTimeout() string {
	if o == nil || IsNil(o.QueryTimeout) {
		var ret string
		return ret
	}
	return *o.QueryTimeout
}

// GetQueryTimeoutOk returns a tuple with the QueryTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetQueryTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.QueryTimeout) {
		return nil, false
	}
	return o.QueryTimeout, true
}

// HasQueryTimeout returns a boolean if a field has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) HasQueryTimeout() bool {
	if o != nil && !IsNil(o.QueryTimeout) {
		return true
	}

	return false
}

// SetQueryTimeout gets a reference to the given string and assigns it to the QueryTimeout field.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) SetQueryTimeout(v string) {
	o.QueryTimeout = &v
}

// GetMaxEntriesLimitPerQuery returns the MaxEntriesLimitPerQuery field value if set, zero value otherwise.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetMaxEntriesLimitPerQuery() int32 {
	if o == nil || IsNil(o.MaxEntriesLimitPerQuery) {
		var ret int32
		return ret
	}
	return *o.MaxEntriesLimitPerQuery
}

// GetMaxEntriesLimitPerQueryOk returns a tuple with the MaxEntriesLimitPerQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetMaxEntriesLimitPerQueryOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxEntriesLimitPerQuery) {
		return nil, false
	}
	return o.MaxEntriesLimitPerQuery, true
}

// HasMaxEntriesLimitPerQuery returns a boolean if a field has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) HasMaxEntriesLimitPerQuery() bool {
	if o != nil && !IsNil(o.MaxEntriesLimitPerQuery) {
		return true
	}

	return false
}

// SetMaxEntriesLimitPerQuery gets a reference to the given int32 and assigns it to the MaxEntriesLimitPerQuery field.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) SetMaxEntriesLimitPerQuery(v int32) {
	o.MaxEntriesLimitPerQuery = &v
}

// GetMaxQueryLookback returns the MaxQueryLookback field value if set, zero value otherwise.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetMaxQueryLookback() string {
	if o == nil || IsNil(o.MaxQueryLookback) {
		var ret string
		return ret
	}
	return *o.MaxQueryLookback
}

// GetMaxQueryLookbackOk returns a tuple with the MaxQueryLookback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetMaxQueryLookbackOk() (*string, bool) {
	if o == nil || IsNil(o.MaxQueryLookback) {
		return nil, false
	}
	return o.MaxQueryLookback, true
}

// HasMaxQueryLookback returns a boolean if a field has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) HasMaxQueryLookback() bool {
	if o != nil && !IsNil(o.MaxQueryLookback) {
		return true
	}

	return false
}

// SetMaxQueryLookback gets a reference to the given string and assigns it to the MaxQueryLookback field.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) SetMaxQueryLookback(v string) {
	o.MaxQueryLookback = &v
}

// GetMaxQueryLength returns the MaxQueryLength field value if set, zero value otherwise.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetMaxQueryLength() string {
	if o == nil || IsNil(o.MaxQueryLength) {
		var ret string
		return ret
	}
	return *o.MaxQueryLength
}

// GetMaxQueryLengthOk returns a tuple with the MaxQueryLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) GetMaxQueryLengthOk() (*string, bool) {
	if o == nil || IsNil(o.MaxQueryLength) {
		return nil, false
	}
	return o.MaxQueryLength, true
}

// HasMaxQueryLength returns a boolean if a field has been set.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) HasMaxQueryLength() bool {
	if o != nil && !IsNil(o.MaxQueryLength) {
		return true
	}

	return false
}

// SetMaxQueryLength gets a reference to the given string and assigns it to the MaxQueryLength field.
func (o *AuthAccessPolicyAttributesLokiQueryPolicy) SetMaxQueryLength(v string) {
	o.MaxQueryLength = &v
}

func (o AuthAccessPolicyAttributesLokiQueryPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthAccessPolicyAttributesLokiQueryPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.QueryTimeout) {
		toSerialize["queryTimeout"] = o.QueryTimeout
	}
	if !IsNil(o.MaxEntriesLimitPerQuery) {
		toSerialize["maxEntriesLimitPerQuery"] = o.MaxEntriesLimitPerQuery
	}
	if !IsNil(o.MaxQueryLookback) {
		toSerialize["maxQueryLookback"] = o.MaxQueryLookback
	}
	if !IsNil(o.MaxQueryLength) {
		toSerialize["maxQueryLength"] = o.MaxQueryLength
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthAccessPolicyAttributesLokiQueryPolicy) UnmarshalJSON(data []byte) (err error) {
	varAuthAccessPolicyAttributesLokiQueryPolicy := _AuthAccessPolicyAttributesLokiQueryPolicy{}

	err = json.Unmarshal(data, &varAuthAccessPolicyAttributesLokiQueryPolicy)

	if err != nil {
		return err
	}

	*o = AuthAccessPolicyAttributesLokiQueryPolicy(varAuthAccessPolicyAttributesLokiQueryPolicy)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "queryTimeout")
		delete(additionalProperties, "maxEntriesLimitPerQuery")
		delete(additionalProperties, "maxQueryLookback")
		delete(additionalProperties, "maxQueryLength")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthAccessPolicyAttributesLokiQueryPolicy struct {
	value *AuthAccessPolicyAttributesLokiQueryPolicy
	isSet bool
}

func (v NullableAuthAccessPolicyAttributesLokiQueryPolicy) Get() *AuthAccessPolicyAttributesLokiQueryPolicy {
	return v.value
}

func (v *NullableAuthAccessPolicyAttributesLokiQueryPolicy) Set(val *AuthAccessPolicyAttributesLokiQueryPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthAccessPolicyAttributesLokiQueryPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthAccessPolicyAttributesLokiQueryPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthAccessPolicyAttributesLokiQueryPolicy(val *AuthAccessPolicyAttributesLokiQueryPolicy) *NullableAuthAccessPolicyAttributesLokiQueryPolicy {
	return &NullableAuthAccessPolicyAttributesLokiQueryPolicy{value: val, isSet: true}
}

func (v NullableAuthAccessPolicyAttributesLokiQueryPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthAccessPolicyAttributesLokiQueryPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
