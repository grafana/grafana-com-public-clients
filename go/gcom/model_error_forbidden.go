/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ErrorForbidden type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorForbidden{}

// ErrorForbidden struct for ErrorForbidden
type ErrorForbidden struct {
	Message              *string `json:"message,omitempty"`
	Code                 *string `json:"code,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ErrorForbidden ErrorForbidden

// NewErrorForbidden instantiates a new ErrorForbidden object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorForbidden() *ErrorForbidden {
	this := ErrorForbidden{}
	return &this
}

// NewErrorForbiddenWithDefaults instantiates a new ErrorForbidden object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorForbiddenWithDefaults() *ErrorForbidden {
	this := ErrorForbidden{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ErrorForbidden) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorForbidden) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ErrorForbidden) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ErrorForbidden) SetMessage(v string) {
	o.Message = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorForbidden) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorForbidden) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorForbidden) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorForbidden) SetCode(v string) {
	o.Code = &v
}

func (o ErrorForbidden) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorForbidden) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorForbidden) UnmarshalJSON(data []byte) (err error) {
	varErrorForbidden := _ErrorForbidden{}

	err = json.Unmarshal(data, &varErrorForbidden)

	if err != nil {
		return err
	}

	*o = ErrorForbidden(varErrorForbidden)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "code")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorForbidden struct {
	value *ErrorForbidden
	isSet bool
}

func (v NullableErrorForbidden) Get() *ErrorForbidden {
	return v.value
}

func (v *NullableErrorForbidden) Set(val *ErrorForbidden) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorForbidden) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorForbidden) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorForbidden(val *ErrorForbidden) *NullableErrorForbidden {
	return &NullableErrorForbidden{value: val, isSet: true}
}

func (v NullableErrorForbidden) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorForbidden) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
