/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the ItemsInner4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ItemsInner4{}

// ItemsInner4 struct for ItemsInner4
type ItemsInner4 struct {
	Month                float32 `json:"month"`
	Year                 float32 `json:"year"`
	AdditionalProperties map[string]interface{}
}

type _ItemsInner4 ItemsInner4

// NewItemsInner4 instantiates a new ItemsInner4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewItemsInner4(month float32, year float32) *ItemsInner4 {
	this := ItemsInner4{}
	this.Month = month
	this.Year = year
	return &this
}

// NewItemsInner4WithDefaults instantiates a new ItemsInner4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewItemsInner4WithDefaults() *ItemsInner4 {
	this := ItemsInner4{}
	return &this
}

// GetMonth returns the Month field value
func (o *ItemsInner4) GetMonth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Month
}

// GetMonthOk returns a tuple with the Month field value
// and a boolean to check if the value has been set.
func (o *ItemsInner4) GetMonthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Month, true
}

// SetMonth sets field value
func (o *ItemsInner4) SetMonth(v float32) {
	o.Month = v
}

// GetYear returns the Year field value
func (o *ItemsInner4) GetYear() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Year
}

// GetYearOk returns a tuple with the Year field value
// and a boolean to check if the value has been set.
func (o *ItemsInner4) GetYearOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Year, true
}

// SetYear sets field value
func (o *ItemsInner4) SetYear(v float32) {
	o.Year = v
}

func (o ItemsInner4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ItemsInner4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["month"] = o.Month
	toSerialize["year"] = o.Year

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ItemsInner4) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varItemsInner4 := _ItemsInner4{}

	err = json.Unmarshal(data, &varItemsInner4)

	if err != nil {
		return err
	}

	*o = ItemsInner4(varItemsInner4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "month")
		delete(additionalProperties, "year")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableItemsInner4 struct {
	value *ItemsInner4
	isSet bool
}

func (v NullableItemsInner4) Get() *ItemsInner4 {
	return v.value
}

func (v *NullableItemsInner4) Set(val *ItemsInner4) {
	v.value = val
	v.isSet = true
}

func (v NullableItemsInner4) IsSet() bool {
	return v.isSet
}

func (v *NullableItemsInner4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableItemsInner4(val *ItemsInner4) *NullableItemsInner4 {
	return &NullableItemsInner4{value: val, isSet: true}
}

func (v NullableItemsInner4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableItemsInner4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
