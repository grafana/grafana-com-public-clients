/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// checks if the PostAllApiKeysRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostAllApiKeysRequest{}

// PostAllApiKeysRequest struct for PostAllApiKeysRequest
type PostAllApiKeysRequest struct {
	Name                 string `json:"name"`
	Org                  string `json:"org"`
	Role                 string `json:"role"`
	AdditionalProperties map[string]interface{}
}

type _PostAllApiKeysRequest PostAllApiKeysRequest

// NewPostAllApiKeysRequest instantiates a new PostAllApiKeysRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostAllApiKeysRequest(name string, org string, role string) *PostAllApiKeysRequest {
	this := PostAllApiKeysRequest{}
	this.Name = name
	this.Org = org
	this.Role = role
	return &this
}

// NewPostAllApiKeysRequestWithDefaults instantiates a new PostAllApiKeysRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostAllApiKeysRequestWithDefaults() *PostAllApiKeysRequest {
	this := PostAllApiKeysRequest{}
	return &this
}

// GetName returns the Name field value
func (o *PostAllApiKeysRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PostAllApiKeysRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PostAllApiKeysRequest) SetName(v string) {
	o.Name = v
}

// GetOrg returns the Org field value
func (o *PostAllApiKeysRequest) GetOrg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Org
}

// GetOrgOk returns a tuple with the Org field value
// and a boolean to check if the value has been set.
func (o *PostAllApiKeysRequest) GetOrgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Org, true
}

// SetOrg sets field value
func (o *PostAllApiKeysRequest) SetOrg(v string) {
	o.Org = v
}

// GetRole returns the Role field value
func (o *PostAllApiKeysRequest) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *PostAllApiKeysRequest) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *PostAllApiKeysRequest) SetRole(v string) {
	o.Role = v
}

func (o PostAllApiKeysRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostAllApiKeysRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["org"] = o.Org
	toSerialize["role"] = o.Role

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PostAllApiKeysRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"org",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostAllApiKeysRequest := _PostAllApiKeysRequest{}

	err = json.Unmarshal(data, &varPostAllApiKeysRequest)

	if err != nil {
		return err
	}

	*o = PostAllApiKeysRequest(varPostAllApiKeysRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "org")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePostAllApiKeysRequest struct {
	value *PostAllApiKeysRequest
	isSet bool
}

func (v NullablePostAllApiKeysRequest) Get() *PostAllApiKeysRequest {
	return v.value
}

func (v *NullablePostAllApiKeysRequest) Set(val *PostAllApiKeysRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostAllApiKeysRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostAllApiKeysRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostAllApiKeysRequest(val *PostAllApiKeysRequest) *NullablePostAllApiKeysRequest {
	return &NullablePostAllApiKeysRequest{value: val, isSet: true}
}

func (v NullablePostAllApiKeysRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostAllApiKeysRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
