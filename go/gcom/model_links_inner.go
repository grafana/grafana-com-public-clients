/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the LinksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinksInner{}

// LinksInner struct for LinksInner
type LinksInner struct {
	Rel                  *string `json:"rel,omitempty"`
	Href                 *string `json:"href,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LinksInner LinksInner

// NewLinksInner instantiates a new LinksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinksInner() *LinksInner {
	this := LinksInner{}
	var rel string = "self"
	this.Rel = &rel
	return &this
}

// NewLinksInnerWithDefaults instantiates a new LinksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinksInnerWithDefaults() *LinksInner {
	this := LinksInner{}
	var rel string = "self"
	this.Rel = &rel
	return &this
}

// GetRel returns the Rel field value if set, zero value otherwise.
func (o *LinksInner) GetRel() string {
	if o == nil || IsNil(o.Rel) {
		var ret string
		return ret
	}
	return *o.Rel
}

// GetRelOk returns a tuple with the Rel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksInner) GetRelOk() (*string, bool) {
	if o == nil || IsNil(o.Rel) {
		return nil, false
	}
	return o.Rel, true
}

// HasRel returns a boolean if a field has been set.
func (o *LinksInner) HasRel() bool {
	if o != nil && !IsNil(o.Rel) {
		return true
	}

	return false
}

// SetRel gets a reference to the given string and assigns it to the Rel field.
func (o *LinksInner) SetRel(v string) {
	o.Rel = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *LinksInner) GetHref() string {
	if o == nil || IsNil(o.Href) {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinksInner) GetHrefOk() (*string, bool) {
	if o == nil || IsNil(o.Href) {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *LinksInner) HasHref() bool {
	if o != nil && !IsNil(o.Href) {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *LinksInner) SetHref(v string) {
	o.Href = &v
}

func (o LinksInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rel) {
		toSerialize["rel"] = o.Rel
	}
	if !IsNil(o.Href) {
		toSerialize["href"] = o.Href
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LinksInner) UnmarshalJSON(data []byte) (err error) {
	varLinksInner := _LinksInner{}

	err = json.Unmarshal(data, &varLinksInner)

	if err != nil {
		return err
	}

	*o = LinksInner(varLinksInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rel")
		delete(additionalProperties, "href")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLinksInner struct {
	value *LinksInner
	isSet bool
}

func (v NullableLinksInner) Get() *LinksInner {
	return v.value
}

func (v *NullableLinksInner) Set(val *LinksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLinksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLinksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinksInner(val *LinksInner) *NullableLinksInner {
	return &NullableLinksInner{value: val, isSet: true}
}

func (v NullableLinksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
