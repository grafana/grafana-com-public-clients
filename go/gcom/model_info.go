/*
GCOM API

Grafana.com API (public).  Looking for GCOM API client packages? You can find them at [grafana-com-public-clients](https://github.com/grafana/grafana-com-public-clients) repository.  If you have any questions, please contact support in the Grafana Cloud UI.  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: public
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
)

// checks if the Info type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Info{}

// Info struct for Info
type Info struct {
	ServiceName          string   `json:"serviceName"`
	PrivateDNS           string   `json:"privateDNS"`
	Regions              []string `json:"regions,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Info Info

// NewInfo instantiates a new Info object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfo(serviceName string, privateDNS string) *Info {
	this := Info{}
	this.ServiceName = serviceName
	this.PrivateDNS = privateDNS
	return &this
}

// NewInfoWithDefaults instantiates a new Info object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfoWithDefaults() *Info {
	this := Info{}
	return &this
}

// GetServiceName returns the ServiceName field value
func (o *Info) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *Info) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *Info) SetServiceName(v string) {
	o.ServiceName = v
}

// GetPrivateDNS returns the PrivateDNS field value
func (o *Info) GetPrivateDNS() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateDNS
}

// GetPrivateDNSOk returns a tuple with the PrivateDNS field value
// and a boolean to check if the value has been set.
func (o *Info) GetPrivateDNSOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateDNS, true
}

// SetPrivateDNS sets field value
func (o *Info) SetPrivateDNS(v string) {
	o.PrivateDNS = v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *Info) GetRegions() []string {
	if o == nil || IsNil(o.Regions) {
		var ret []string
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Info) GetRegionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *Info) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []string and assigns it to the Regions field.
func (o *Info) SetRegions(v []string) {
	o.Regions = v
}

func (o Info) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Info) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["serviceName"] = o.ServiceName
	toSerialize["privateDNS"] = o.PrivateDNS
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Info) UnmarshalJSON(data []byte) (err error) {
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	varInfo := _Info{}

	err = json.Unmarshal(data, &varInfo)

	if err != nil {
		return err
	}

	*o = Info(varInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "serviceName")
		delete(additionalProperties, "privateDNS")
		delete(additionalProperties, "regions")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInfo struct {
	value *Info
	isSet bool
}

func (v NullableInfo) Get() *Info {
	return v.value
}

func (v *NullableInfo) Set(val *Info) {
	v.value = val
	v.isSet = true
}

func (v NullableInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfo(val *Info) *NullableInfo {
	return &NullableInfo{value: val, isSet: true}
}

func (v NullableInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
