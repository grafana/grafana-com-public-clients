/*
GCOM API

 Grafana.com API (or GCOM). This documentation includes all endpoints of GCOM API including the staff ones.  Looking for GCOM API client packages? You can find them at [grafana-com-clients](https://github.com/grafana/grafana-com-clients) repository.  If you have any questions, please contact us at #grafana_com on Slack or open an issue at [Grafana-com repository](https://github.com/grafana/grafana-com/issues/new).  This spec is in *Beta* stage, so use it with caution: - Not all endpoint responses are properly typed for the time being. - Some request parameter types may not be precise

API version: internal
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gcom

import (
	"encoding/json"
	"fmt"
)

// checks if the Current type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Current{}

// Current struct for Current
type Current struct {
	Product                interface{}            `json:"product"`
	IsTrial                bool                   `json:"isTrial"`
	EndDate                interface{}            `json:"endDate"`
	Payload                map[string]interface{} `json:"payload"`
	Plan                   interface{}            `json:"plan"`
	PublicName             interface{}            `json:"publicName"`
	EnterprisePluginsAdded bool                   `json:"enterprisePluginsAdded"`
	AdditionalProperties   map[string]interface{}
}

type _Current Current

// NewCurrent instantiates a new Current object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrent(product interface{}, isTrial bool, endDate interface{}, payload map[string]interface{}, plan interface{}, publicName interface{}, enterprisePluginsAdded bool) *Current {
	this := Current{}
	this.Product = product
	this.IsTrial = isTrial
	this.EndDate = endDate
	this.Payload = payload
	this.Plan = plan
	this.PublicName = publicName
	this.EnterprisePluginsAdded = enterprisePluginsAdded
	return &this
}

// NewCurrentWithDefaults instantiates a new Current object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrentWithDefaults() *Current {
	this := Current{}
	return &this
}

// GetProduct returns the Product field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Current) GetProduct() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Current) GetProductOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *Current) SetProduct(v interface{}) {
	o.Product = v
}

// GetIsTrial returns the IsTrial field value
func (o *Current) GetIsTrial() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTrial
}

// GetIsTrialOk returns a tuple with the IsTrial field value
// and a boolean to check if the value has been set.
func (o *Current) GetIsTrialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTrial, true
}

// SetIsTrial sets field value
func (o *Current) SetIsTrial(v bool) {
	o.IsTrial = v
}

// GetEndDate returns the EndDate field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Current) GetEndDate() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Current) GetEndDateOk() (*interface{}, bool) {
	if o == nil || IsNil(o.EndDate) {
		return nil, false
	}
	return &o.EndDate, true
}

// SetEndDate sets field value
func (o *Current) SetEndDate(v interface{}) {
	o.EndDate = v
}

// GetPayload returns the Payload field value
func (o *Current) GetPayload() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
func (o *Current) GetPayloadOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Payload, true
}

// SetPayload sets field value
func (o *Current) SetPayload(v map[string]interface{}) {
	o.Payload = v
}

// GetPlan returns the Plan field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Current) GetPlan() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Current) GetPlanOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *Current) SetPlan(v interface{}) {
	o.Plan = v
}

// GetPublicName returns the PublicName field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Current) GetPublicName() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.PublicName
}

// GetPublicNameOk returns a tuple with the PublicName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Current) GetPublicNameOk() (*interface{}, bool) {
	if o == nil || IsNil(o.PublicName) {
		return nil, false
	}
	return &o.PublicName, true
}

// SetPublicName sets field value
func (o *Current) SetPublicName(v interface{}) {
	o.PublicName = v
}

// GetEnterprisePluginsAdded returns the EnterprisePluginsAdded field value
func (o *Current) GetEnterprisePluginsAdded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnterprisePluginsAdded
}

// GetEnterprisePluginsAddedOk returns a tuple with the EnterprisePluginsAdded field value
// and a boolean to check if the value has been set.
func (o *Current) GetEnterprisePluginsAddedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnterprisePluginsAdded, true
}

// SetEnterprisePluginsAdded sets field value
func (o *Current) SetEnterprisePluginsAdded(v bool) {
	o.EnterprisePluginsAdded = v
}

func (o Current) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Current) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Product != nil {
		toSerialize["product"] = o.Product
	}
	toSerialize["isTrial"] = o.IsTrial
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	toSerialize["payload"] = o.Payload
	if o.Plan != nil {
		toSerialize["plan"] = o.Plan
	}
	if o.PublicName != nil {
		toSerialize["publicName"] = o.PublicName
	}
	toSerialize["enterprisePluginsAdded"] = o.EnterprisePluginsAdded

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Current) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"product",
		"isTrial",
		"endDate",
		"payload",
		"plan",
		"publicName",
		"enterprisePluginsAdded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCurrent := _Current{}

	err = json.Unmarshal(data, &varCurrent)

	if err != nil {
		return err
	}

	*o = Current(varCurrent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "product")
		delete(additionalProperties, "isTrial")
		delete(additionalProperties, "endDate")
		delete(additionalProperties, "payload")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "publicName")
		delete(additionalProperties, "enterprisePluginsAdded")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCurrent struct {
	value *Current
	isSet bool
}

func (v NullableCurrent) Get() *Current {
	return v.value
}

func (v *NullableCurrent) Set(val *Current) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrent) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrent(val *Current) *NullableCurrent {
	return &NullableCurrent{value: val, isSet: true}
}

func (v NullableCurrent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
